c3b29fafb7df2670fa17130ebc5b31ba
/* istanbul ignore next */
"use strict";

var cov_1t0q4yflrl = function () {
  var path = "/mnt/j/Workspaces/dogescript/lib/tokenizer.js";
  var hash = "4ddf498918f9244ef432cc7008be68b20eff93ef";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/j/Workspaces/dogescript/lib/tokenizer.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "1": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 17
        }
      },
      "2": {
        start: {
          line: 16,
          column: 18
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "3": {
        start: {
          line: 17,
          column: 17
        },
        end: {
          line: 17,
          column: 22
        }
      },
      "4": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "5": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "6": {
        start: {
          line: 24,
          column: 21
        },
        end: {
          line: 24,
          column: 57
        }
      },
      "7": {
        start: {
          line: 25,
          column: 6
        },
        end: {
          line: 29,
          column: 7
        }
      },
      "8": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 23
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 17
        }
      },
      "10": {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 21
        }
      },
      "11": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 27
        }
      },
      "12": {
        start: {
          line: 36,
          column: 6
        },
        end: {
          line: 36,
          column: 15
        }
      },
      "13": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "14": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 45,
          column: 7
        }
      },
      "15": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 31
        }
      },
      "16": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 23
        }
      },
      "17": {
        start: {
          line: 46,
          column: 6
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "18": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 19
        }
      },
      "19": {
        start: {
          line: 53,
          column: 2
        },
        end: {
          line: 56,
          column: 3
        }
      },
      "20": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 27
        }
      },
      "21": {
        start: {
          line: 58,
          column: 2
        },
        end: {
          line: 58,
          column: 16
        }
      },
      "22": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 61,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "isWhiteSpace",
        decl: {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 21
          }
        },
        loc: {
          start: {
            line: 5,
            column: 0
          },
          end: {
            line: 7,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "tokenize",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 17
          }
        },
        loc: {
          start: {
            line: 13,
            column: 0
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 10
          },
          end: {
            line: 6,
            column: 19
          }
        }, {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 6,
            column: 35
          }
        }, {
          start: {
            line: 6,
            column: 41
          },
          end: {
            line: 6,
            column: 51
          }
        }],
        line: 6
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 6
          },
          end: {
            line: 29,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 6
          },
          end: {
            line: 29,
            column: 7
          }
        }, {
          start: {
            line: 25,
            column: 6
          },
          end: {
            line: 29,
            column: 7
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        }, {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 7
          },
          end: {
            line: 39,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 7
          },
          end: {
            line: 39,
            column: 16
          }
        }, {
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 39,
            column: 35
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 6
          },
          end: {
            line: 45,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 6
          },
          end: {
            line: 45,
            column: 7
          }
        }, {
          start: {
            line: 41,
            column: 6
          },
          end: {
            line: 45,
            column: 7
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 53,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        }, {
          start: {
            line: 53,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        }],
        line: 53
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "4ddf498918f9244ef432cc7008be68b20eff93ef"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

/**
 * Determines if the character is white space or not
 */
function isWhiteSpace(ch) {
  /* istanbul ignore next */
  cov_1t0q4yflrl.f[0]++;
  cov_1t0q4yflrl.s[0]++;
  return (
    /* istanbul ignore next */
    (cov_1t0q4yflrl.b[0][0]++, ch == ' ') ||
    /* istanbul ignore next */
    (cov_1t0q4yflrl.b[0][1]++, ch == '\t') ||
    /* istanbul ignore next */
    (cov_1t0q4yflrl.b[0][2]++, ch == '\n')
  );
}
/**
 * Tokenizes a given line
 */


function tokenize(line) {
  /* istanbul ignore next */
  cov_1t0q4yflrl.f[1]++;
  var tokens =
  /* istanbul ignore next */
  (cov_1t0q4yflrl.s[1]++, []);
  var currToken =
  /* istanbul ignore next */
  (cov_1t0q4yflrl.s[2]++, "");
  var inString =
  /* istanbul ignore next */
  (cov_1t0q4yflrl.s[3]++, false);

  /* istanbul ignore next */
  cov_1t0q4yflrl.s[4]++;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (
    /* istanbul ignore next */
    var _iterator = line[Symbol.iterator](), _step;
    /* istanbul ignore next */
    !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
    /* istanbul ignore next */
    _iteratorNormalCompletion = true) {
      /* istanbul ignore next */
      var c = _step.value;

      /* istanbul ignore next */
      cov_1t0q4yflrl.s[5]++;

      if (c === "'") {
        /* istanbul ignore next */
        cov_1t0q4yflrl.b[1][0]++;
        // check if the previous token is an intentional escape like in '\'\''
        var lastChar =
        /* istanbul ignore next */
        (cov_1t0q4yflrl.s[6]++, currToken.charAt(currToken.length - 1));

        /* istanbul ignore next */
        cov_1t0q4yflrl.s[7]++;

        if (lastChar === '\\') {
          /* istanbul ignore next */
          cov_1t0q4yflrl.b[2][0]++;
          cov_1t0q4yflrl.s[8]++;
          currToken += c;

          /* istanbul ignore next */
          cov_1t0q4yflrl.s[9]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1t0q4yflrl.b[2][1]++;
        } // otherwise we're closing the string or opening it so append the '


        cov_1t0q4yflrl.s[10]++;
        currToken += c; // flip value

        /* istanbul ignore next */
        cov_1t0q4yflrl.s[11]++;
        inString = !inString;

        /* istanbul ignore next */
        cov_1t0q4yflrl.s[12]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1t0q4yflrl.b[1][1]++;
      }

      cov_1t0q4yflrl.s[13]++;

      if (
      /* istanbul ignore next */
      (cov_1t0q4yflrl.b[4][0]++, !inString) &&
      /* istanbul ignore next */
      (cov_1t0q4yflrl.b[4][1]++, isWhiteSpace(c))) {
        /* istanbul ignore next */
        cov_1t0q4yflrl.b[3][0]++;
        cov_1t0q4yflrl.s[14]++;

        if (currToken.trim().length > 0) {
          /* istanbul ignore next */
          cov_1t0q4yflrl.b[5][0]++;
          cov_1t0q4yflrl.s[15]++;
          tokens.push(currToken);

          /* istanbul ignore next */
          cov_1t0q4yflrl.s[16]++;
          currToken = "";
        } else
        /* istanbul ignore next */
        {
          cov_1t0q4yflrl.b[5][1]++;
        }

        cov_1t0q4yflrl.s[17]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1t0q4yflrl.b[3][1]++;
      } // append the tokens


      cov_1t0q4yflrl.s[18]++;
      currToken += c;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  /* istanbul ignore next */
  cov_1t0q4yflrl.s[19]++;

  if (currToken.trim().length > 0) {
    /* istanbul ignore next */
    cov_1t0q4yflrl.b[6][0]++;
    cov_1t0q4yflrl.s[20]++;
    tokens.push(currToken);
  } else
  /* istanbul ignore next */
  {
    cov_1t0q4yflrl.b[6][1]++;
  }

  cov_1t0q4yflrl.s[21]++;
  return tokens;
}

/* istanbul ignore next */
cov_1t0q4yflrl.s[22]++;
module.exports.tokenize = tokenize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRva2VuaXplci5qcyJdLCJuYW1lcyI6WyJpc1doaXRlU3BhY2UiLCJjaCIsInRva2VuaXplIiwibGluZSIsInRva2VucyIsImN1cnJUb2tlbiIsImluU3RyaW5nIiwiYyIsImxhc3RDaGFyIiwiY2hhckF0IiwibGVuZ3RoIiwidHJpbSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7QUFHQSxTQUFTQSxZQUFULENBQXNCQyxFQUF0QixFQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0UsU0FBTztBQUFBO0FBQUEsK0JBQUNBLEVBQUUsSUFBSSxHQUFQO0FBQUE7QUFBQSwrQkFBZ0JBLEVBQUUsSUFBSSxJQUF0QjtBQUFBO0FBQUEsK0JBQWdDQSxFQUFFLElBQUksSUFBdEM7QUFBUDtBQUNEO0FBRUQ7Ozs7O0FBR0EsU0FBU0MsUUFBVCxDQUFrQkMsSUFBbEIsRUFDQTtBQUFBO0FBQUE7QUFDRSxNQUFJQyxNQUFNO0FBQUE7QUFBQSwwQkFBRyxFQUFILENBQVY7QUFFQSxNQUFJQyxTQUFTO0FBQUE7QUFBQSwwQkFBRyxFQUFILENBQWI7QUFDQSxNQUFJQyxRQUFRO0FBQUE7QUFBQSwwQkFBRyxLQUFILENBQVo7O0FBSkY7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQU1FO0FBQUE7QUFBQSxvQkFBYUgsSUFBYjtBQUFBO0FBQUE7QUFBQTtBQUFBLHNDQUNBO0FBQUE7QUFBQSxVQURRSSxDQUNSOztBQUFBO0FBQUE7O0FBQ0UsVUFBR0EsQ0FBQyxLQUFLLEdBQVQsRUFDQTtBQUFBO0FBQUE7QUFDRTtBQUNBLFlBQUlDLFFBQVE7QUFBQTtBQUFBLGdDQUFHSCxTQUFTLENBQUNJLE1BQVYsQ0FBaUJKLFNBQVMsQ0FBQ0ssTUFBVixHQUFpQixDQUFsQyxDQUFILENBQVo7O0FBRkY7QUFBQTs7QUFHRSxZQUFHRixRQUFRLEtBQUssSUFBaEIsRUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNFSCxVQUFBQSxTQUFTLElBQUlFLENBQWI7O0FBREY7QUFBQTtBQUVFO0FBQ0QsU0FKRDtBQUFBO0FBQUE7QUFBQTtBQUFBLFNBSEYsQ0FTRTs7O0FBVEY7QUFVRUYsUUFBQUEsU0FBUyxJQUFJRSxDQUFiLENBVkYsQ0FZRTs7QUFaRjtBQUFBO0FBYUVELFFBQUFBLFFBQVEsR0FBRyxDQUFDQSxRQUFaOztBQWJGO0FBQUE7QUFjRTtBQUNELE9BaEJEO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBREY7O0FBbUJFO0FBQUc7QUFBQSxrQ0FBQ0EsUUFBRDtBQUFBO0FBQUEsaUNBQWFOLFlBQVksQ0FBQ08sQ0FBRCxDQUF6QixDQUFILEVBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBQ0UsWUFBR0YsU0FBUyxDQUFDTSxJQUFWLEdBQWlCRCxNQUFqQixHQUEwQixDQUE3QixFQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0VOLFVBQUFBLE1BQU0sQ0FBQ1EsSUFBUCxDQUFZUCxTQUFaOztBQURGO0FBQUE7QUFFRUEsVUFBQUEsU0FBUyxHQUFHLEVBQVo7QUFDRCxTQUpEO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBREY7QUFNRTtBQUNELE9BUkQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQW5CRixDQTZCRTs7O0FBN0JGO0FBOEJFQSxNQUFBQSxTQUFTLElBQUlFLENBQWI7QUFDRDtBQXRDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBd0NFLE1BQUdGLFNBQVMsQ0FBQ00sSUFBVixHQUFpQkQsTUFBakIsR0FBMEIsQ0FBN0IsRUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNFTixJQUFBQSxNQUFNLENBQUNRLElBQVAsQ0FBWVAsU0FBWjtBQUNELEdBSEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUF4Q0Y7QUE2Q0UsU0FBT0QsTUFBUDtBQUNEOzs7O0FBRURTLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlWixRQUFmLEdBQTBCQSxRQUExQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBjaGFyYWN0ZXIgaXMgd2hpdGUgc3BhY2Ugb3Igbm90XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1doaXRlU3BhY2UoY2gpXHJcbntcclxuICByZXR1cm4gKGNoID09ICcgJykgfHwgKGNoID09ICdcXHQnKSB8fCAoY2ggPT0gJ1xcbicpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUb2tlbml6ZXMgYSBnaXZlbiBsaW5lXHJcbiAqL1xyXG5mdW5jdGlvbiB0b2tlbml6ZShsaW5lKVxyXG57XHJcbiAgdmFyIHRva2VucyA9IFtdXHJcblxyXG4gIHZhciBjdXJyVG9rZW4gPSBcIlwiO1xyXG4gIHZhciBpblN0cmluZyA9IGZhbHNlO1xyXG5cclxuICBmb3IodmFyIGMgb2YgbGluZSlcclxuICB7XHJcbiAgICBpZihjID09PSBcIidcIilcclxuICAgIHtcclxuICAgICAgLy8gY2hlY2sgaWYgdGhlIHByZXZpb3VzIHRva2VuIGlzIGFuIGludGVudGlvbmFsIGVzY2FwZSBsaWtlIGluICdcXCdcXCcnXHJcbiAgICAgIHZhciBsYXN0Q2hhciA9IGN1cnJUb2tlbi5jaGFyQXQoY3VyclRva2VuLmxlbmd0aC0xKTtcclxuICAgICAgaWYobGFzdENoYXIgPT09ICdcXFxcJylcclxuICAgICAge1xyXG4gICAgICAgIGN1cnJUb2tlbiArPSBjO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBvdGhlcndpc2Ugd2UncmUgY2xvc2luZyB0aGUgc3RyaW5nIG9yIG9wZW5pbmcgaXQgc28gYXBwZW5kIHRoZSAnXHJcbiAgICAgIGN1cnJUb2tlbiArPSBjO1xyXG5cclxuICAgICAgLy8gZmxpcCB2YWx1ZVxyXG4gICAgICBpblN0cmluZyA9ICFpblN0cmluZztcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoIWluU3RyaW5nICYmIGlzV2hpdGVTcGFjZShjKSlcclxuICAgIHtcclxuICAgICAgaWYoY3VyclRva2VuLnRyaW0oKS5sZW5ndGggPiAwKVxyXG4gICAgICB7XHJcbiAgICAgICAgdG9rZW5zLnB1c2goY3VyclRva2VuKTtcclxuICAgICAgICBjdXJyVG9rZW4gPSBcIlwiO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBhcHBlbmQgdGhlIHRva2Vuc1xyXG4gICAgY3VyclRva2VuICs9IGM7XHJcbiAgfVxyXG5cclxuICBpZihjdXJyVG9rZW4udHJpbSgpLmxlbmd0aCA+IDApXHJcbiAge1xyXG4gICAgdG9rZW5zLnB1c2goY3VyclRva2VuKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0b2tlbnM7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzLnRva2VuaXplID0gdG9rZW5pemU7XHJcbiJdfQ==