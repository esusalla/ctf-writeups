{"version":3,"sources":["tokenizer.js"],"names":["isWhiteSpace","ch","tokenize","line","tokens","currToken","inString","c","lastChar","charAt","length","trim","push","module","exports"],"mappingssBC,EAAtB,EACA;AAAA;AAAA;AAAA;AACE,SAAO;AAAA;AAAA,+BAACA,EAAE,IAAI,GAAP;AAAA;AAAA,+BAAgBA,EAAE,IAAI,IAAtB;AAAA;AAAA,+BAAgCA,EAAE,IAAI,IAAtC;AAAP;AACD;AAED;;;;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EACA;AAAA;AAAA;AACE,MAAIC,MAAM;AAAA;AAAA,0BAAG,EAAH,CAAV;AAEA,MAAIC,SAAS;AAAA;AAAA,0BAAG,EAAH,CAAb;AACA,MAAIC,QAAQ;AAAA;AAAA,0BAAG,KAAH,CAAZ;;AAJF;AAAA;AAAA;AAAA;AAAA;;AAAA;AAME;AAAA;AAAA,oBAAaH,IAAb;AAAA;AAAA;AAAA;AAAA,sCACA;AAAA;AAAA,UADQI,CACR;;AAAA;AAAA;;AACE,UAAGA,CAAC,KAAK,GAAT,EACA;AAAA;AAAA;AACE;AACA,YAAIC,QAAQ;AAAA;AAAA,gCAAGH,SAAS,CAACI,MAAV,CAAiBJ,SAAS,CAACK,MAAV,GAAiB,CAAlC,CAAH,CAAZ;;AAFF;AAAA;;AAGE,YAAGF,QAAQ,KAAK,IAAhB,EACA;AAAA;AAAA;AAAA;AACEH,UAAAA,SAAS,IAAIE,CAAb;;AADF;AAAA;AAEE;AACD,SAJD;AAAA;AAAA;AAAA;AAAA,SAHF,CASE;;;AATF;AAUEF,QAAAA,SAAS,IAAIE,CAAb,CAVF,CAYE;;AAZF;AAAA;AAaED,QAAAA,QAAQ,GAAG,CAACA,QAAZ;;AAbF;AAAA;AAcE;AACD,OAhBD;AAAA;AAAA;AAAA;AAAA;;AADF;;AAmBE;AAAG;AAAA,kCAACA,QAAD;AAAA;AAAA,iCAAaN,YAAY,CAACO,CAAD,CAAzB,CAAH,EACA;AAAA;AAAA;AAAA;;AACE,YAAGF,SAAS,CAACM,IAAV,GAAiBD,MAAjB,GAA0B,CAA7B,EACA;AAAA;AAAA;AAAA;AACEN,UAAAA,MAAM,CAACQ,IAAP,CAAYP,SAAZ;;AADF;AAAA;AAEEA,UAAAA,SAAS,GAAG,EAAZ;AACD,SAJD;AAAA;AAAA;AAAA;AAAA;;AADF;AAME;AACD,OARD;AAAA;AAAA;AAAA;AAAA,OAnBF,CA6BE;;;AA7BF;AA8BEA,MAAAA,SAAS,IAAIE,CAAb;AACD;AAtCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAwCE,MAAGF,SAAS,CAACM,IAAV,GAAiBD,MAAjB,GAA0B,CAA7B,EACA;AAAA;AAAA;AAAA;AACEN,IAAAA,MAAM,CAACQ,IAAP,CAAYP,SAAZ;AACD,GAHD;AAAA;AAAA;AAAA;AAAA;;AAxCF;AA6CE,SAAOD,MAAP;AACD;;;;AAEDS,MAAM,CAACC,OAAP,CAAeZ,QAAf,GAA0BA,QAA1B","sourcesContent":["/**\r\n * Determines if the character is white space or not\r\n */\r\nfunction isWhiteSpace(ch)\r\n{\r\n  return (ch == ' ') || (ch == '\\t') || (ch == '\\n')\r\n}\r\n\r\n/**\r\n * Tokenizes a given line\r\n */\r\nfunction tokenize(line)\r\n{\r\n  var tokens = []\r\n\r\n  var currToken = \"\";\r\n  var inString = false;\r\n\r\n  for(var c of line)\r\n  {\r\n    if(c === \"'\")\r\n    {\r\n      // check if the previous token is an intentional escape like in '\\'\\''\r\n      var lastChar = currToken.charAt(currToken.length-1);\r\n      if(lastChar === '\\\\')\r\n      {\r\n        currToken += c;\r\n        continue;\r\n      }\r\n\r\n      // otherwise we're closing the string or opening it so append the '\r\n      currToken += c;\r\n\r\n      // flip value\r\n      inString = !inString;\r\n      continue;\r\n    }\r\n\r\n    if(!inString && isWhiteSpace(c))\r\n    {\r\n      if(currToken.trim().length > 0)\r\n      {\r\n        tokens.push(currToken);\r\n        currToken = \"\";\r\n      }\r\n      continue;\r\n    }\r\n    \r\n    // append the tokens\r\n    currToken += c;\r\n  }\r\n\r\n  if(currToken.trim().length > 0)\r\n  {\r\n    tokens.push(currToken);\r\n  }\r\n\r\n  return tokens;\r\n}\r\n\r\nmodule.exports.tokenize = tokenize;\r\n"]}