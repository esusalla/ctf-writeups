8598d38089d297fb7becc829297f9a7f
"use strict";

var fs = require('fs');

var path = require('path');

var _require = require('child_process'),
    exec = _require.exec;

var util = require('./util');

var TRANSPILE_PATH = path.join(__dirname, 'transpile');
var BINARY_PATH = path.join(__dirname, '..', 'dist', 'dogescript.bin.js');

function generateFilePath(folderName, fileName) {
  return path.join(TRANSPILE_PATH, folderName, fileName);
}

function runTest(testDirName) {
  it("".concat(testDirName, " should transpile correctly"), function (done) {
    var expectedPath = generateFilePath(testDirName, 'expected.js');
    var sourcePath = generateFilePath(testDirName, 'source.djs');
    /**
     * Execute the binary and capture the stdout
     */

    exec("".concat(BINARY_PATH, " ").concat(sourcePath), {
      encoding: 'UTF-8'
    }, function (error, stdout, stderr) {
      expect(error).toEqual(null);
      expect(stderr).toEqual("");
      var expectedOutput = util.readCleanCRLF(expectedPath);
      var actual = util.cleanCRLF(stdout);
      expect(actual).toEqual(expectedOutput);
      done();
    });
  });
}

describe("Transpiling tests", function () {
  runTest('escaped-quotes');
  runTest('iota');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zcGlsZS50ZXN0LmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJleGVjIiwidXRpbCIsIlRSQU5TUElMRV9QQVRIIiwiam9pbiIsIl9fZGlybmFtZSIsIkJJTkFSWV9QQVRIIiwiZ2VuZXJhdGVGaWxlUGF0aCIsImZvbGRlck5hbWUiLCJmaWxlTmFtZSIsInJ1blRlc3QiLCJ0ZXN0RGlyTmFtZSIsIml0IiwiZG9uZSIsImV4cGVjdGVkUGF0aCIsInNvdXJjZVBhdGgiLCJlbmNvZGluZyIsImVycm9yIiwic3Rkb3V0Iiwic3RkZXJyIiwiZXhwZWN0IiwidG9FcXVhbCIsImV4cGVjdGVkT3V0cHV0IiwicmVhZENsZWFuQ1JMRiIsImFjdHVhbCIsImNsZWFuQ1JMRiIsImRlc2NyaWJlIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBaEI7O0FBQ0EsSUFBSUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFsQjs7ZUFDaUJBLE9BQU8sQ0FBQyxlQUFELEM7SUFBaEJFLEksWUFBQUEsSTs7QUFDUixJQUFJQyxJQUFJLEdBQUdILE9BQU8sQ0FBQyxRQUFELENBQWxCOztBQUVBLElBQU1JLGNBQWMsR0FBR0gsSUFBSSxDQUFDSSxJQUFMLENBQVVDLFNBQVYsRUFBcUIsV0FBckIsQ0FBdkI7QUFDQSxJQUFNQyxXQUFXLEdBQUdOLElBQUksQ0FBQ0ksSUFBTCxDQUFVQyxTQUFWLEVBQXFCLElBQXJCLEVBQTJCLE1BQTNCLEVBQW1DLG1CQUFuQyxDQUFwQjs7QUFFQSxTQUFTRSxnQkFBVCxDQUEwQkMsVUFBMUIsRUFBc0NDLFFBQXRDLEVBQWdEO0FBQzlDLFNBQU9ULElBQUksQ0FBQ0ksSUFBTCxDQUFVRCxjQUFWLEVBQTBCSyxVQUExQixFQUFzQ0MsUUFBdEMsQ0FBUDtBQUNEOztBQUVELFNBQVNDLE9BQVQsQ0FBaUJDLFdBQWpCLEVBQ0E7QUFDRUMsRUFBQUEsRUFBRSxXQUFJRCxXQUFKLGtDQUE4QyxVQUFVRSxJQUFWLEVBQWdCO0FBQzlELFFBQU1DLFlBQVksR0FBR1AsZ0JBQWdCLENBQUNJLFdBQUQsRUFBYyxhQUFkLENBQXJDO0FBQ0EsUUFBTUksVUFBVSxHQUFHUixnQkFBZ0IsQ0FBQ0ksV0FBRCxFQUFjLFlBQWQsQ0FBbkM7QUFFQTs7OztBQUdDVixJQUFBQSxJQUFJLFdBQUlLLFdBQUosY0FBbUJTLFVBQW5CLEdBQWlDO0FBQUVDLE1BQUFBLFFBQVEsRUFBRTtBQUFaLEtBQWpDLEVBQXdELFVBQUNDLEtBQUQsRUFBUUMsTUFBUixFQUFnQkMsTUFBaEIsRUFBMkI7QUFDckZDLE1BQUFBLE1BQU0sQ0FBQ0gsS0FBRCxDQUFOLENBQWNJLE9BQWQsQ0FBc0IsSUFBdEI7QUFDQUQsTUFBQUEsTUFBTSxDQUFDRCxNQUFELENBQU4sQ0FBZUUsT0FBZixDQUF1QixFQUF2QjtBQUVBLFVBQUlDLGNBQWMsR0FBR3BCLElBQUksQ0FBQ3FCLGFBQUwsQ0FBbUJULFlBQW5CLENBQXJCO0FBQ0EsVUFBSVUsTUFBTSxHQUFHdEIsSUFBSSxDQUFDdUIsU0FBTCxDQUFlUCxNQUFmLENBQWI7QUFFQUUsTUFBQUEsTUFBTSxDQUFDSSxNQUFELENBQU4sQ0FBZUgsT0FBZixDQUF1QkMsY0FBdkI7QUFDQVQsTUFBQUEsSUFBSTtBQUNMLEtBVEcsQ0FBSjtBQVVGLEdBakJDLENBQUY7QUFrQkQ7O0FBRURhLFFBQVEsQ0FBQyxtQkFBRCxFQUFzQixZQUFZO0FBQ3hDaEIsRUFBQUEsT0FBTyxDQUFDLGdCQUFELENBQVA7QUFDQUEsRUFBQUEsT0FBTyxDQUFDLE1BQUQsQ0FBUDtBQUNELENBSE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5jb25zdCB7IGV4ZWMgfSA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcclxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcclxuXHJcbmNvbnN0IFRSQU5TUElMRV9QQVRIID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ3RyYW5zcGlsZScpO1xyXG5jb25zdCBCSU5BUllfUEFUSCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICdkaXN0JywgJ2RvZ2VzY3JpcHQuYmluLmpzJyk7XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUZpbGVQYXRoKGZvbGRlck5hbWUsIGZpbGVOYW1lKSB7XHJcbiAgcmV0dXJuIHBhdGguam9pbihUUkFOU1BJTEVfUEFUSCwgZm9sZGVyTmFtZSwgZmlsZU5hbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBydW5UZXN0KHRlc3REaXJOYW1lKVxyXG57XHJcbiAgaXQoYCR7dGVzdERpck5hbWV9IHNob3VsZCB0cmFuc3BpbGUgY29ycmVjdGx5YCwgZnVuY3Rpb24gKGRvbmUpIHtcclxuICAgIGNvbnN0IGV4cGVjdGVkUGF0aCA9IGdlbmVyYXRlRmlsZVBhdGgodGVzdERpck5hbWUsICdleHBlY3RlZC5qcycpXHJcbiAgICBjb25zdCBzb3VyY2VQYXRoID0gZ2VuZXJhdGVGaWxlUGF0aCh0ZXN0RGlyTmFtZSwgJ3NvdXJjZS5kanMnKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGUgdGhlIGJpbmFyeSBhbmQgY2FwdHVyZSB0aGUgc3Rkb3V0XHJcbiAgICAgKi9cclxuICAgICBleGVjKGAke0JJTkFSWV9QQVRIfSAke3NvdXJjZVBhdGh9YCwgeyBlbmNvZGluZzogJ1VURi04JyB9LCAoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XHJcbiAgICAgICBleHBlY3QoZXJyb3IpLnRvRXF1YWwobnVsbCk7XHJcbiAgICAgICBleHBlY3Qoc3RkZXJyKS50b0VxdWFsKFwiXCIpO1xyXG5cclxuICAgICAgIHZhciBleHBlY3RlZE91dHB1dCA9IHV0aWwucmVhZENsZWFuQ1JMRihleHBlY3RlZFBhdGgpO1xyXG4gICAgICAgdmFyIGFjdHVhbCA9IHV0aWwuY2xlYW5DUkxGKHN0ZG91dCk7XHJcblxyXG4gICAgICAgZXhwZWN0KGFjdHVhbCkudG9FcXVhbChleHBlY3RlZE91dHB1dCk7XHJcbiAgICAgICBkb25lKCk7XHJcbiAgICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmRlc2NyaWJlKFwiVHJhbnNwaWxpbmcgdGVzdHNcIiwgZnVuY3Rpb24gKCkge1xyXG4gIHJ1blRlc3QoJ2VzY2FwZWQtcXVvdGVzJyk7XHJcbiAgcnVuVGVzdCgnaW90YScpXHJcbn0pO1xyXG4iXX0=