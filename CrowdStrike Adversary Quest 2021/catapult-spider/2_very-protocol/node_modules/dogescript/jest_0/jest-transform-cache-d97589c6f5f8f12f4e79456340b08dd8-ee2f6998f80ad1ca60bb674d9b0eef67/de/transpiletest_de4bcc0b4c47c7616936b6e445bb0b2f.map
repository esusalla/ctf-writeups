{"version":3,"sources":["transpile.test.js"],"names":["fs","require","path","exec","util","TRANSPILE_PATH","join","__dirname","BINARY_PATH","generateFilePath","folderName","fileName","runTest","testDirName","it","done","expectedPath","sourcePath","encoding","error","stdout","stderr","expect","toEqual","expectedOutput","readCleanCRLF","actual","cleanCRLF","describe"],"mappings":";;AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;eACiBA,OAAO,CAAC,eAAD,C;IAAhBE,I,YAAAA,I;;AACR,IAAIC,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAMI,cAAc,GAAGH,IAAI,CAACI,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAvB;AACA,IAAMC,WAAW,GAAGN,IAAI,CAACI,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,MAA3B,EAAmC,mBAAnC,CAApB;;AAEA,SAASE,gBAAT,CAA0BC,UAA1B,EAAsCC,QAAtC,EAAgD;AAC9C,SAAOT,IAAI,CAACI,IAAL,CAAUD,cAAV,EAA0BK,UAA1B,EAAsCC,QAAtC,CAAP;AACD;;AAED,SAASC,OAAT,CAAiBC,WAAjB,EACA;AACEC,EAAAA,EAAE,WAAID,WAAJ,kCAA8C,UAAUE,IAAV,EAAgB;AAC9D,QAAMC,YAAY,GAAGP,gBAAgB,CAACI,WAAD,EAAc,aAAd,CAArC;AACA,QAAMI,UAAU,GAAGR,gBAAgB,CAACI,WAAD,EAAc,YAAd,CAAnC;AAEA;;;;AAGCV,IAAAA,IAAI,WAAIK,WAAJ,cAAmBS,UAAnB,GAAiC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAjC,EAAwD,UAACC,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAA2B;AACrFC,MAAAA,MAAM,CAACH,KAAD,CAAN,CAAcI,OAAd,CAAsB,IAAtB;AACAD,MAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,OAAf,CAAuB,EAAvB;AAEA,UAAIC,cAAc,GAAGpB,IAAI,CAACqB,aAAL,CAAmBT,YAAnB,CAArB;AACA,UAAIU,MAAM,GAAGtB,IAAI,CAACuB,SAAL,CAAeP,MAAf,CAAb;AAEAE,MAAAA,MAAM,CAACI,MAAD,CAAN,CAAeH,OAAf,CAAuBC,cAAvB;AACAT,MAAAA,IAAI;AACL,KATG,CAAJ;AAUF,GAjBC,CAAF;AAkBD;;AAEDa,QAAQ,CAAC,mBAAD,EAAsB,YAAY;AACxChB,EAAAA,OAAO,CAAC,gBAAD,CAAP;AACAA,EAAAA,OAAO,CAAC,MAAD,CAAP;AACD,CAHO,CAAR","sourcesContent":["var fs = require('fs');\r\nvar path = require('path');\r\nconst { exec } = require('child_process');\r\nvar util = require('./util');\r\n\r\nconst TRANSPILE_PATH = path.join(__dirname, 'transpile');\r\nconst BINARY_PATH = path.join(__dirname, '..', 'dist', 'dogescript.bin.js');\r\n\r\nfunction generateFilePath(folderName, fileName) {\r\n  return path.join(TRANSPILE_PATH, folderName, fileName);\r\n}\r\n\r\nfunction runTest(testDirName)\r\n{\r\n  it(`${testDirName} should transpile correctly`, function (done) {\r\n    const expectedPath = generateFilePath(testDirName, 'expected.js')\r\n    const sourcePath = generateFilePath(testDirName, 'source.djs');\r\n\r\n    /**\r\n     * Execute the binary and capture the stdout\r\n     */\r\n     exec(`${BINARY_PATH} ${sourcePath}`, { encoding: 'UTF-8' }, (error, stdout, stderr) => {\r\n       expect(error).toEqual(null);\r\n       expect(stderr).toEqual(\"\");\r\n\r\n       var expectedOutput = util.readCleanCRLF(expectedPath);\r\n       var actual = util.cleanCRLF(stdout);\r\n\r\n       expect(actual).toEqual(expectedOutput);\r\n       done();\r\n     });\r\n  });\r\n}\r\n\r\ndescribe(\"Transpiling tests\", function () {\r\n  runTest('escaped-quotes');\r\n  runTest('iota')\r\n});\r\n"]}