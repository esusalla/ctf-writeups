e276f99bf9ad57e85f12199ff98e5caf
"use strict";

var tokenizer = require('../lib/tokenizer');

it("handles single word", function () {
  var tokens = tokenizer.tokenize('foo');
  expect(tokens).toEqual(['foo']);
});
it("handles multiple words", function () {
  var input = "plz foo with a b c";
  var tokens = tokenizer.tokenize(input);
  expect(tokens).toEqual(['plz', 'foo', 'with', 'a', 'b', 'c']);
});
it("handles escaped single quotes", function () {
  var input = "plz foo with '\''";
  var tokens = tokenizer.tokenize(input);
  expect(tokens).toEqual(["plz", "foo", "with", "'\''"]);
});
it("handles json", function () {
  var input = "very x is { foo: bar }";
  var tokens = tokenizer.tokenize(input);
  expect(tokens).toEqual(["very", "x", "is", "{", "foo:", "bar", "}"]);
});
it("handles arrays", function () {
  var input = "very x is [1, 2, 3]";
  var tokens = tokenizer.tokenize(input);
  expect(tokens).toEqual(["very", "x", "is", "[1,", "2,", "3]"]);
});
it("handles string with spaces without breaking it", function () {
  var input = "'hello world!'";
  var tokens = tokenizer.tokenize(input);
  expect(tokens).toEqual(["'hello world!'"]);
});
it("handles json with string value", function () {
  var input = "{ some: \"json\" }";
  var tokens = tokenizer.tokenize(input);
  expect(tokens).toEqual(["{", "some:", "\"json\"", "}"]);
});
it("handles array declarations", function () {
  var input = "[1, 2, 3]";
  var tokens = tokenizer.tokenize(input);
  expect(tokens).toEqual(["[1,", "2,", "3]"]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRva2VuaXplci50ZXN0LmpzIl0sIm5hbWVzIjpbInRva2VuaXplciIsInJlcXVpcmUiLCJpdCIsInRva2VucyIsInRva2VuaXplIiwiZXhwZWN0IiwidG9FcXVhbCIsImlucHV0Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGtCQUFELENBQXZCOztBQUVBQyxFQUFFLENBQUMscUJBQUQsRUFBd0IsWUFBWTtBQUNsQyxNQUFJQyxNQUFNLEdBQUdILFNBQVMsQ0FBQ0ksUUFBVixDQUFtQixLQUFuQixDQUFiO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ0YsTUFBRCxDQUFOLENBQWVHLE9BQWYsQ0FBdUIsQ0FBQyxLQUFELENBQXZCO0FBQ0gsQ0FIQyxDQUFGO0FBS0FKLEVBQUUsQ0FBQyx3QkFBRCxFQUEyQixZQUFZO0FBQ3ZDLE1BQUlLLEtBQUssR0FBRyxvQkFBWjtBQUNBLE1BQUlKLE1BQU0sR0FBR0gsU0FBUyxDQUFDSSxRQUFWLENBQW1CRyxLQUFuQixDQUFiO0FBQ0FGLEVBQUFBLE1BQU0sQ0FBQ0YsTUFBRCxDQUFOLENBQWVHLE9BQWYsQ0FBdUIsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLE1BQWYsRUFBdUIsR0FBdkIsRUFBNEIsR0FBNUIsRUFBaUMsR0FBakMsQ0FBdkI7QUFDRCxDQUpDLENBQUY7QUFNQUosRUFBRSxDQUFDLCtCQUFELEVBQWtDLFlBQVk7QUFDOUMsTUFBSUssS0FBSyxHQUFHLG1CQUFaO0FBQ0EsTUFBSUosTUFBTSxHQUFHSCxTQUFTLENBQUNJLFFBQVYsQ0FBbUJHLEtBQW5CLENBQWI7QUFDQUYsRUFBQUEsTUFBTSxDQUFDRixNQUFELENBQU4sQ0FBZUcsT0FBZixDQUF1QixDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsTUFBZixFQUF1QixNQUF2QixDQUF2QjtBQUNELENBSkMsQ0FBRjtBQU1BSixFQUFFLENBQUMsY0FBRCxFQUFpQixZQUFZO0FBQzdCLE1BQUlLLEtBQUssR0FBRyx3QkFBWjtBQUNBLE1BQUlKLE1BQU0sR0FBR0gsU0FBUyxDQUFDSSxRQUFWLENBQW1CRyxLQUFuQixDQUFiO0FBQ0FGLEVBQUFBLE1BQU0sQ0FBQ0YsTUFBRCxDQUFOLENBQWVHLE9BQWYsQ0FBdUIsQ0FBQyxNQUFELEVBQVMsR0FBVCxFQUFjLElBQWQsRUFBb0IsR0FBcEIsRUFBeUIsTUFBekIsRUFBaUMsS0FBakMsRUFBd0MsR0FBeEMsQ0FBdkI7QUFDRCxDQUpDLENBQUY7QUFNQUosRUFBRSxDQUFDLGdCQUFELEVBQW1CLFlBQVk7QUFDL0IsTUFBSUssS0FBSyxHQUFHLHFCQUFaO0FBQ0EsTUFBSUosTUFBTSxHQUFHSCxTQUFTLENBQUNJLFFBQVYsQ0FBbUJHLEtBQW5CLENBQWI7QUFDQUYsRUFBQUEsTUFBTSxDQUFDRixNQUFELENBQU4sQ0FBZUcsT0FBZixDQUF1QixDQUFDLE1BQUQsRUFBUyxHQUFULEVBQWMsSUFBZCxFQUFvQixLQUFwQixFQUEyQixJQUEzQixFQUFpQyxJQUFqQyxDQUF2QjtBQUNELENBSkMsQ0FBRjtBQU1BSixFQUFFLENBQUMsZ0RBQUQsRUFBbUQsWUFBYTtBQUNoRSxNQUFJSyxLQUFLLEdBQUcsZ0JBQVo7QUFDQSxNQUFJSixNQUFNLEdBQUdILFNBQVMsQ0FBQ0ksUUFBVixDQUFtQkcsS0FBbkIsQ0FBYjtBQUNBRixFQUFBQSxNQUFNLENBQUNGLE1BQUQsQ0FBTixDQUFlRyxPQUFmLENBQXVCLENBQUMsZ0JBQUQsQ0FBdkI7QUFDRCxDQUpDLENBQUY7QUFNQUosRUFBRSxDQUFDLGdDQUFELEVBQW1DLFlBQVU7QUFDN0MsTUFBSUssS0FBSyxHQUFHLG9CQUFaO0FBQ0EsTUFBSUosTUFBTSxHQUFHSCxTQUFTLENBQUNJLFFBQVYsQ0FBbUJHLEtBQW5CLENBQWI7QUFDQUYsRUFBQUEsTUFBTSxDQUFDRixNQUFELENBQU4sQ0FBZUcsT0FBZixDQUF1QixDQUFDLEdBQUQsRUFBTSxPQUFOLEVBQWUsVUFBZixFQUEyQixHQUEzQixDQUF2QjtBQUNELENBSkMsQ0FBRjtBQU1BSixFQUFFLENBQUMsNEJBQUQsRUFBK0IsWUFBVztBQUMxQyxNQUFJSyxLQUFLLEdBQUcsV0FBWjtBQUNBLE1BQUlKLE1BQU0sR0FBR0gsU0FBUyxDQUFDSSxRQUFWLENBQW1CRyxLQUFuQixDQUFiO0FBQ0FGLEVBQUFBLE1BQU0sQ0FBQ0YsTUFBRCxDQUFOLENBQWVHLE9BQWYsQ0FBdUIsQ0FBQyxLQUFELEVBQVEsSUFBUixFQUFjLElBQWQsQ0FBdkI7QUFDRCxDQUpDLENBQUYiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9rZW5pemVyID0gcmVxdWlyZSgnLi4vbGliL3Rva2VuaXplcicpO1xyXG5cclxuaXQoXCJoYW5kbGVzIHNpbmdsZSB3b3JkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0b2tlbnMgPSB0b2tlbml6ZXIudG9rZW5pemUoJ2ZvbycpO1xyXG4gICAgZXhwZWN0KHRva2VucykudG9FcXVhbChbJ2ZvbyddKTtcclxufSk7XHJcblxyXG5pdChcImhhbmRsZXMgbXVsdGlwbGUgd29yZHNcIiwgZnVuY3Rpb24gKCkge1xyXG4gIHZhciBpbnB1dCA9IFwicGx6IGZvbyB3aXRoIGEgYiBjXCI7XHJcbiAgdmFyIHRva2VucyA9IHRva2VuaXplci50b2tlbml6ZShpbnB1dCk7XHJcbiAgZXhwZWN0KHRva2VucykudG9FcXVhbChbJ3BseicsICdmb28nLCAnd2l0aCcsICdhJywgJ2InLCAnYyddKTtcclxufSk7XHJcblxyXG5pdChcImhhbmRsZXMgZXNjYXBlZCBzaW5nbGUgcXVvdGVzXCIsIGZ1bmN0aW9uICgpIHtcclxuICB2YXIgaW5wdXQgPSBcInBseiBmb28gd2l0aCAnXFwnJ1wiO1xyXG4gIHZhciB0b2tlbnMgPSB0b2tlbml6ZXIudG9rZW5pemUoaW5wdXQpO1xyXG4gIGV4cGVjdCh0b2tlbnMpLnRvRXF1YWwoW1wicGx6XCIsIFwiZm9vXCIsIFwid2l0aFwiLCBcIidcXCcnXCJdKTtcclxufSk7XHJcblxyXG5pdChcImhhbmRsZXMganNvblwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIGlucHV0ID0gXCJ2ZXJ5IHggaXMgeyBmb286IGJhciB9XCI7XHJcbiAgdmFyIHRva2VucyA9IHRva2VuaXplci50b2tlbml6ZShpbnB1dCk7XHJcbiAgZXhwZWN0KHRva2VucykudG9FcXVhbChbXCJ2ZXJ5XCIsIFwieFwiLCBcImlzXCIsIFwie1wiLCBcImZvbzpcIiwgXCJiYXJcIiwgXCJ9XCJdKTtcclxufSk7XHJcblxyXG5pdChcImhhbmRsZXMgYXJyYXlzXCIsIGZ1bmN0aW9uICgpIHtcclxuICB2YXIgaW5wdXQgPSBcInZlcnkgeCBpcyBbMSwgMiwgM11cIjtcclxuICB2YXIgdG9rZW5zID0gdG9rZW5pemVyLnRva2VuaXplKGlucHV0KTtcclxuICBleHBlY3QodG9rZW5zKS50b0VxdWFsKFtcInZlcnlcIiwgXCJ4XCIsIFwiaXNcIiwgXCJbMSxcIiwgXCIyLFwiLCBcIjNdXCJdKTtcclxufSk7XHJcblxyXG5pdChcImhhbmRsZXMgc3RyaW5nIHdpdGggc3BhY2VzIHdpdGhvdXQgYnJlYWtpbmcgaXRcIiwgZnVuY3Rpb24gKCkgIHtcclxuICB2YXIgaW5wdXQgPSBcIidoZWxsbyB3b3JsZCEnXCI7XHJcbiAgdmFyIHRva2VucyA9IHRva2VuaXplci50b2tlbml6ZShpbnB1dCk7XHJcbiAgZXhwZWN0KHRva2VucykudG9FcXVhbChbXCInaGVsbG8gd29ybGQhJ1wiXSk7XHJcbn0pO1xyXG5cclxuaXQoXCJoYW5kbGVzIGpzb24gd2l0aCBzdHJpbmcgdmFsdWVcIiwgZnVuY3Rpb24oKXtcclxuICB2YXIgaW5wdXQgPSBcInsgc29tZTogXFxcImpzb25cXFwiIH1cIlxyXG4gIHZhciB0b2tlbnMgPSB0b2tlbml6ZXIudG9rZW5pemUoaW5wdXQpO1xyXG4gIGV4cGVjdCh0b2tlbnMpLnRvRXF1YWwoW1wie1wiLCBcInNvbWU6XCIsIFwiXFxcImpzb25cXFwiXCIsIFwifVwiXSk7XHJcbn0pO1xyXG5cclxuaXQoXCJoYW5kbGVzIGFycmF5IGRlY2xhcmF0aW9uc1wiLCBmdW5jdGlvbigpIHtcclxuICB2YXIgaW5wdXQgPSBcIlsxLCAyLCAzXVwiXHJcbiAgdmFyIHRva2VucyA9IHRva2VuaXplci50b2tlbml6ZShpbnB1dCk7XHJcbiAgZXhwZWN0KHRva2VucykudG9FcXVhbChbXCJbMSxcIiwgXCIyLFwiLCBcIjNdXCJdKTtcclxufSk7XHJcbiJdfQ==