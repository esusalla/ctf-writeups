{"version":3,"sources":["parser.js"],"names":["tokenizer","require","classHandlers","functionHandlers","multiComment","multiLine","stateStack","StateEnum","CONTROL_FLOW","hasState","state","length","validOperators","assignOps","unaryOps","binaryOperators","propertyOperators","incrementDecrementOps","controlFlowTokens","valid","expectToken","expectedStart","parseContext","tokens","Error","parseInfo","expectAnyToken","expectedTokens","foundToken","firstToken","i","joinTokens","tokenString","token","shift","containsUnary","hasOwnProperty","containsIncrementDecrement","indexOf","isDogescriptSource","some","isAssignmentOperator","isBinaryOperator","isPropertyOperator","inputTokens","input","shouldCloseStatement","statement","trim","endsWith","includes","handleWoof","exportName","assignmentValue","functionStatement","handleSuch","anonStatement","handleLambda","handleSo","lib","modName","mod","m","exec","replace","handleShh","shhLocation","commentText","substring","handleQuiet","handleLoud","handleNew","object","handleWith","slice","handleRly","push","parseStatements","pop","handleNotrly","handleBut","SyntaxError","chained","chainedSameLine","currentToken","substr","handleWow","arg","handleMuchLoop","handleMany","functionInvocation","functionName","allowedSyntax","handlePlz","invocation","charAt","handleDose","objectName","handleIncrementDecrement","handleVery","handleClass","parseStatement","handleLevl","handleAmaze","returnStatements","declareArguments","handleMaker","handleGit","handleSit","statements","replacements","module","exports","parse","line","tokenize","testToken","Object","keys","forEach","key","startsWith"],"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","sourcesContent":["var tokenizer = require('./tokenizer');\r\nvar classHandlers = require('./handlers/classHandlers');\r\nvar functionHandlers = require('./handlers/functionHandlers');\r\n\r\nvar multiComment = false;\r\nvar multiLine = false;\r\n\r\nvar stateStack = []\r\n\r\nvar StateEnum = {\r\n  CONTROL_FLOW: 1\r\n}\r\n\r\n/**\r\n * Determines whether the parser has entered the desired state or not\r\n */\r\nfunction hasState(state)\r\n{\r\n  if (stateStack.length < 1)\r\n  {\r\n    return false;\r\n  }\r\n\r\n  return stateStack[stateStack.length-1] == state;\r\n}\r\n\r\nvar validOperators = {\r\n    'is': ' === ',\r\n    'not': ' !== ',\r\n    'and':  ' && ',\r\n    'or':  ' || ',\r\n    'as':  ' = ',\r\n    'more':  ' += ',\r\n    'less':  ' -= ',\r\n    'lots': ' *= ',\r\n    'few': ' /= ',\r\n    'very': ' var ',\r\n    'smaller': ' < ',\r\n    'bigger': ' > ',\r\n    'smallerish': ' <= ',\r\n    'biggerish': ' >= ',\r\n    'notrly': ' ! ',\r\n    'bigify': '++',\r\n    'smallify': '--'\r\n};\r\n\r\nvar assignOps = {\r\n  'more': '+=',\r\n  'less': '-=',\r\n  'lots': '*=',\r\n  'few' : '/=',\r\n  'is' : '=',\r\n  'as' : '='\r\n}\r\n\r\nvar unaryOps = {\r\n  'bigify': '++',\r\n  'smallify': '--'\r\n}\r\n\r\nvar binaryOperators = {\r\n  'bigger': '>',\r\n  'biggerish': '>=',\r\n  'smaller': '<',\r\n  'smallerish': '<=',\r\n  'and': '&&',\r\n  'or': '||',\r\n  'not': '!=='\r\n}\r\n\r\n\r\n// giv can probably be applied as a binary operator since it's a simple transform\r\nvar propertyOperators = [ 'giv', 'levl' ]\r\n\r\nvar incrementDecrementOps = ['bigify', 'smallify']\r\n\r\nvar controlFlowTokens = [\r\n  'many',\r\n  'much',\r\n  'rly',\r\n  'but',\r\n  'notrly'\r\n]\r\n\r\nvar valid = [\r\n    'such',\r\n    'wow',\r\n    'wow&',\r\n    'plz',\r\n    '.plz',\r\n    'dose',\r\n    'very',\r\n    'shh',\r\n    'quiet',\r\n    'loud',\r\n    'rly',\r\n    'notrly',\r\n    'but',\r\n    'many',\r\n    'much',\r\n    'so',\r\n    'trained',\r\n    'maybe',\r\n    'debooger',\r\n    'pawse',\r\n    'woof',\r\n    'obj', // can be handled as top-level token\r\n    'giv',\r\n    'levl',\r\n    'next',\r\n    'amaze',\r\n    'classy',\r\n    'maker',\r\n    'grows',\r\n    'git',\r\n    'sit'\r\n];\r\n\r\n/**\r\n * Raises an error if the given tokens do not start with the desired state\r\n */\r\nfunction expectToken(expectedStart, parseContext)\r\n{\r\n  var tokens = parseContext.tokens;\r\n  if ( tokens[0] !== expectedStart)\r\n  {\r\n    throw new Error(`Invalid parse state! Expected: '${expectedStart}' but got: '${tokens[0]}' from chain: [${tokens}]. ${parseInfo(parseContext)}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Raises an error if the start token does not match any of the expected tokens.\r\n */\r\nfunction expectAnyToken(expectedTokens, parseContext)\r\n{\r\n  var tokens = parseContext.tokens;\r\n\r\n  var foundToken = false;\r\n  var firstToken = tokens[0];\r\n  for (let i = 0; i < expectedTokens.length; i ++)\r\n  {\r\n    if(firstToken === expectedTokens[i])\r\n    {\r\n      foundToken = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if(!foundToken)\r\n  {\r\n    throw new Error(`Invalid parse state! Expected any of: '${expectedTokens}' but got: '${tokens[0]}' from chain: [${tokens}]. ${parseInfo(parseContext)}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Joins the set of tokens into a string such that joinTokens([a, b]) returns \"a b\".\r\n * Consumes all tokens from the given array such that the array will be empty if it is referenced after calling this function.\r\n */\r\nfunction joinTokens(tokens)\r\n{\r\n  var tokenString = '';\r\n\r\n  let token;\r\n  while(token = tokens.shift())\r\n  {\r\n    tokenString += token;\r\n    if(tokens.length > 0)\r\n    {\r\n      tokenString += ' ';\r\n    }\r\n  }\r\n\r\n  return tokenString;\r\n}\r\n\r\nfunction containsUnary(parseContext)\r\n{\r\n  var tokens = parseContext.tokens;\r\n  return unaryOps.hasOwnProperty(tokens[0]) || unaryOps.hasOwnProperty(tokens[1]);\r\n}\r\n\r\n/**\r\n * Determines whether the first or second token is one of [bigify, smallify]\r\n */\r\nfunction containsIncrementDecrement(parseContext)\r\n{\r\n  var tokens = parseContext.tokens;\r\n  return incrementDecrementOps.indexOf(tokens[0]) !== -1 || incrementDecrementOps.indexOf(tokens[1]) !== -1;\r\n}\r\n\r\n/**\r\n * Determines if the parsed tokens should be treated as dogescript source or not.\r\n */\r\nfunction isDogescriptSource(parseContext)\r\n{\r\n  var tokens = parseContext.tokens;\r\n\r\n  // starts the statement with a valid token\r\n  if (valid.indexOf(tokens[0]) !== -1)\r\n  {\r\n    return true;\r\n  }\r\n\r\n  // statement applying an assignment operator\r\n  if ( tokens.some(isAssignmentOperator) )\r\n  {\r\n    return true;\r\n  }\r\n\r\n  // applying a unary operator\r\n  if ( containsUnary(parseContext) )\r\n  {\r\n    return true;\r\n  }\r\n\r\n  // calling function on Object\r\n  if ( tokens[1] === 'dose' )\r\n  {\r\n    return true;\r\n  }\r\n\r\n  // ending a multi comment block\r\n  if (multiComment && tokens[0] === 'loud' )\r\n  {\r\n    return true;\r\n  }\r\n\r\n  // closing a multi-line object creation\r\n  if ( multiLine && tokens[0] === 'wow' )\r\n  {\r\n    return true;\r\n  }\r\n\r\n  // binary operation anywhere\r\n  if(tokens.some(isBinaryOperator))\r\n  {\r\n    return true;\r\n  }\r\n\r\n  // something uses a property accessor\r\n  if(tokens.some(isPropertyOperator))\r\n  {\r\n    return true;\r\n  }\r\n\r\n  // check if next is anywhere in the stack\r\n  if(tokens.some(function(token) { return token === 'next' }))\r\n  {\r\n    return true;\r\n  }\r\n\r\n  // not valid dogescript\r\n  return false;\r\n}\r\n\r\n/**\r\n * Creates a formatted message that displays the token set that was parsed and the input.\r\n */\r\nfunction parseInfo(parseContext)\r\n{\r\n  return `Parsed tokens [${parseContext.inputTokens}] from input \"${parseContext.input}\"`;\r\n}\r\n\r\n/**\r\n * Determines whether it's appropriate or not to close a statement with a ';'.\r\n */\r\nfunction shouldCloseStatement(parseContext, statement)\r\n{\r\n  // there's more to parse\r\n  if(parseContext.tokens.length > 0)\r\n  {\r\n    return false;\r\n  }\r\n\r\n  // don't append an extra ';' if the statement can be considered already closed\r\n  if(statement.trim().endsWith(\";\"))\r\n  {\r\n    return false;\r\n  }\r\n\r\n  // when we multi chain call on the next line we can't append a ';'\r\n  if(statement.trim().endsWith(\")\"))\r\n  {\r\n    return false;\r\n  }\r\n\r\n  // if we're opening a json block we have more statement\r\n  if(statement.trim().endsWith(\"{\"))\r\n  {\r\n    return false;\r\n  }\r\n\r\n  // if we're in multiline mode, the property:value assignments should not have a ';'\r\n  return !multiLine;\r\n}\r\n\r\n/**\r\n * Determines whether the token is any of the supported binary operators\r\n */\r\nfunction isBinaryOperator(token)\r\n{\r\n  return binaryOperators.hasOwnProperty(token);\r\n}\r\n\r\n/**\r\n * Determins whether the token is a property accessor token\r\n */\r\nfunction isPropertyOperator(token)\r\n{\r\n  return propertyOperators.includes(token);\r\n}\r\n\r\n/**\r\n * Determines whether the token is an assignment token\r\n */\r\nfunction isAssignmentOperator(token)\r\n{\r\n  return assignOps.hasOwnProperty(token);\r\n}\r\n\r\n/**\r\n * Handles the woof construct:\r\n *  woof <alias> be <export>\r\n *  woof <export>\r\n *\r\n * Produces:\r\n *  module.exports.alias = export\r\n *  module.exports = export\r\n */\r\nfunction handleWoof(parseContext)\r\n{\r\n  expectToken('woof', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: woof\r\n  tokens.shift();\r\n\r\n  var exportName = '';\r\n\r\n  // look ahead and check if it is in `woof x be y` form\r\n  if ( tokens[1] === 'be' )\r\n  {\r\n    // woof foo be X -> module.exports.foo = X\r\n    exportName = '.' + tokens.shift();\r\n\r\n    // consume: be\r\n    tokens.shift();\r\n  }\r\n\r\n  // module.exports = SOMETHING\r\n  var statement = 'module.exports' + exportName + ' = ';\r\n\r\n  var assignmentValue = tokens[0];\r\n  // woof something -> module.exports = something\r\n  if( tokens.length === 1)\r\n  {\r\n    statement += tokens.shift();\r\n    statement += '\\n';\r\n    return statement;\r\n  }\r\n\r\n  // module.exports = function x(a,b) {}\r\n  if ( assignmentValue === 'such' )\r\n  {\r\n    var functionStatement = functionHandlers.handleSuch(parseContext);\r\n    statement += functionStatement;\r\n    // the closing wow will be in a new line\r\n    return statement;\r\n  }\r\n\r\n  // module.exports = function (a,b) {}\r\n  if ( assignmentValue === 'much')\r\n  {\r\n    var anonStatement = functionHandlers.handleLambda(parseContext);\r\n    statement += anonStatement;\r\n    // the closing wow will be in a new line\r\n    return statement;\r\n  }\r\n\r\n  // TODO support other expressions\r\n  throw new Error(`Invalid parse state! Expected a value but got: '${tokens[0]}' from chain: [${tokens}]. Allowed construct 'woof [<name> be] <value | <SUCH> | <MUCH> >'. ${parseInfo(parseContext)}`);\r\n}\r\n\r\n/**\r\n * Handles the so construct (thanks @maxogden!):\r\n *  so <module> [as <name>]\r\n *\r\n * Produces:\r\n *  var name = require('module');\r\n */\r\nfunction handleSo(parseContext)\r\n{\r\n  expectToken('so', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: so\r\n  tokens.shift();\r\n\r\n  var statement = '';\r\n  var lib = tokens.shift();\r\n\r\n  var modName = '';\r\n\r\n  // check if it's a named import or not\r\n  if(tokens.length > 0) {\r\n    expectToken('as', parseContext);\r\n    // consume: as\r\n    tokens.shift();\r\n    modName = tokens.shift();\r\n  } else {\r\n    // so x\r\n\r\n    // try to make a simple name\r\n    var mod = lib;\r\n    // test for relative module, optional chop extension\r\n    var m = /^..?\\/.*?([\\w-]+)(\\.\\w+)?$/.exec(mod);\r\n    if (m) {\r\n        mod = m[1];\r\n    }\r\n    modName = mod.replace(/-/g, '_');\r\n  }\r\n\r\n  return `var ${modName} = require('${lib}');\\n`;\r\n}\r\n\r\n/**\r\n * Handles the single line comment:\r\n * shh [text]\r\n *\r\n * Produces:\r\n * // text\r\n */\r\nfunction handleShh(parseContext)\r\n{\r\n  expectToken('shh', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: shh\r\n  tokens.shift();\r\n\r\n  var statement = '// ';\r\n\r\n  // preserve any spacing after 'shh '\r\n  var input = parseContext.input;\r\n  var shhLocation = input.indexOf(\"shh \");\r\n  var commentText = input.substring(shhLocation+4);\r\n  statement += commentText;\r\n  statement += '\\n';\r\n\r\n  // consume tokens so we don't reparse\r\n  parseContext.tokens = [];\r\n\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles the beginning of a multi-line comment:\r\n * quiet [comments]\r\n *\r\n * Produces the start of a multi-line comment \"/*\"\r\n */\r\n function handleQuiet(parseContext)\r\n {\r\n  expectToken('quiet', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n   // consume: quiet\r\n   tokens.shift();\r\n\r\n   multiComment = true;\r\n\r\n   var statement = '/*';\r\n   statement += joinTokens(parseContext.tokens);\r\n   statement += '\\n';\r\n\r\n   return statement;\r\n }\r\n\r\n/**\r\n * Handles the end of the multi-line comment:\r\n * loud\r\n *\r\n * Produces the end of a multiline comment \"*\\/\"\r\n */\r\nfunction handleLoud(parseContext)\r\n{\r\n  expectToken('loud', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  if(!multiComment)\r\n  {\r\n    throw new Error(\"Unparseable syntax! Encountered: 'loud' without first seeing 'quiet'\");\r\n  }\r\n\r\n  // consume: loud\r\n  tokens.shift();\r\n\r\n  multiComment = false;\r\n\r\n  var statement = '*/';\r\n  statement += joinTokens(parseContext.tokens);\r\n  statement += '\\n';\r\n\r\n  return statement;\r\n}\r\n\r\n/**\r\n *\r\n * Handles instantiation via new:\r\n * new x [with args]\r\n *\r\n */\r\nfunction handleNew(parseContext)\r\n{\r\n  expectToken('new', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: new\r\n  tokens.shift();\r\n\r\n  var statement = 'new ';\r\n\r\n  var object = tokens.shift();\r\n\r\n  // handle arguments\r\n  if(tokens[0] === 'with' )\r\n  {\r\n    // add constructor name\r\n    statement += object;\r\n    statement += handleWith(parseContext);\r\n    return statement;\r\n  }\r\n\r\n  // call doesn't have args\r\n  if (object.slice(-1) === '&') {\r\n    object = object.slice(0, -1);\r\n    statement += object + '()\\n';\r\n  } else {\r\n    statement += object + '();\\n';\r\n  }\r\n\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles if statements:\r\n * rly [condition]\r\n */\r\nfunction handleRly(parseContext)\r\n{\r\n  expectToken('rly', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: rly\r\n  tokens.shift();\r\n\r\n  var statement = 'if ('\r\n  stateStack.push(StateEnum.CONTROL_FLOW);\r\n  statement += parseStatements(parseContext);\r\n  stateStack.pop();\r\n  // close condition and open branch\r\n  statement += ') {\\n';\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles negated if statements:\r\n * notrly [condition]\r\n */\r\nfunction handleNotrly(parseContext)\r\n{\r\n  expectToken('notrly', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: notrly\r\n  tokens.shift();\r\n\r\n  var statement = 'if (!';\r\n  stateStack.push(StateEnum.CONTROL_FLOW);\r\n  statement += parseStatements(parseContext);\r\n  stateStack.pop();\r\n  // close condition and open branch\r\n  statement += ') {\\n';\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles else statements:\r\n * but [condition]\r\n * but [rly|notrly] [condition]\r\n */\r\nfunction handleBut(parseContext)\r\n{\r\n  expectToken('but', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: but\r\n  tokens.shift();\r\n\r\n  var statement = '} else ';\r\n  if (tokens[0] === 'rly' || tokens[0] === 'notrly' )\r\n  {\r\n    if(tokens[0] === 'rly' )\r\n    {\r\n      statement += handleRly(parseContext);\r\n    }\r\n    else {\r\n      statement += handleNotrly(parseContext);\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // open branch\r\n    statement += '{\\n';\r\n  }\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles arguments to function call:\r\n * with <args>\r\n *\r\n * Produces:\r\n * (<args>)\r\n */\r\nfunction handleWith(parseContext)\r\n{\r\n  expectToken('with', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: with\r\n  tokens.shift();\r\n\r\n  if (tokens.length < 1) {\r\n    throw new SyntaxError(`Expected arguments but got nothing. Allowed construct: with [args]. ${parseInfo(parseContext)}`);\r\n  }\r\n\r\n  var statement = '(';\r\n\r\n  // if the last token ends with & we are chaining calls\r\n  var chained = tokens[tokens.length - 1].slice(-1) === '&';\r\n  var chainedSameLine = false;\r\n\r\n  while(tokens.length > 0) {\r\n\r\n      // look ahead before consuming the tokens\r\n      if (tokens[0] === 'much') { // lambda functions - thanks @00Davo!\r\n        var anonStatement = functionHandlers.handleLambda(parseContext);\r\n        statement += anonStatement;\r\n        return statement;\r\n      }\r\n\r\n      var currentToken = tokens.shift();\r\n      if (currentToken === ',' || currentToken === '&') {\r\n        continue;\r\n      }\r\n\r\n      // we are chaining the call\r\n      if( currentToken === 'thx')\r\n      {\r\n        chainedSameLine = true;\r\n        // exit and return\r\n        break;\r\n      }\r\n\r\n      // clean up name if foo& or foo, to foo\r\n      if (currentToken.substr(-1) === '&' || currentToken.substr(-1) === ',') {\r\n        currentToken = currentToken.slice(0, -1);\r\n      }\r\n\r\n      statement += currentToken;\r\n\r\n      // format a:b into a: b\r\n      if (currentToken.substr(-1) === ':') {\r\n        statement += ' ';\r\n      }\r\n\r\n      // append , if not last arg or an object literal\r\n      if (tokens.length > 0 && currentToken.substr(-1) !== ':') {\r\n        statement += ', ';\r\n      }\r\n  }\r\n\r\n  // cleanup dangling pieces\r\n  if (statement.substr(-2) === ', ') {\r\n    statement = statement.slice(0, -2);\r\n  }\r\n\r\n  // the token regex will split {a: b} into {a:, b, } which will cause us to append ', }'\r\n  if (statement.includes(', ]'))\r\n  {\r\n    statement += statement.replace(/, ]/g, ']');\r\n  }\r\n  if (statement.includes(', }'))\r\n  {\r\n    statement = statement.replace(/, }/g, '}');\r\n  }\r\n\r\n  if(chainedSameLine)\r\n  {\r\n    statement += ')';\r\n  }\r\n  else if (chained)\r\n  {\r\n    statement += ')\\n';\r\n  }\r\n  else\r\n  {\r\n    statement += ');\\n';\r\n  }\r\n\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles the ending of statements:\r\n * wow [return vals]\r\n * wow& [return vals]\r\n */\r\nfunction handleWow(parseContext)\r\n{\r\n  expectAnyToken(['wow', 'wow&'], parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n  multiLine = false;\r\n\r\n  var chained = tokens[0] === 'wow&';\r\n\r\n  // consume: wow/wow&\r\n  tokens.shift();\r\n\r\n  var statement = '';\r\n\r\n  // add tokens if there's a return value\r\n  if(tokens.length > 0)\r\n  {\r\n    statement += 'return';\r\n    let arg;\r\n    // ideally this will call parsetokens in the future to support return foo();\r\n    while(arg = tokens.shift())\r\n    {\r\n      statement += ' ' + arg;\r\n    }\r\n    statement += ';\\n';\r\n  }\r\n\r\n  if(chained)\r\n  {\r\n    // close chained call\r\n    statement += '}) \\n';\r\n  } else {\r\n    // close block\r\n    statement += '} \\n';\r\n  }\r\n\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles the for loop construct:\r\n * much [startState] next [condition] next [nextState]\r\n *\r\n * Produces:\r\n * for(startState; condition; nextState) {\r\n */\r\nfunction handleMuchLoop(parseContext)\r\n{\r\n  expectToken('much', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: much\r\n  tokens.shift();\r\n\r\n  var statement = 'for ('\r\n  stateStack.push(StateEnum.CONTROL_FLOW);\r\n  statement += parseStatements(parseContext);\r\n  stateStack.pop();\r\n  statement += ') {\\n';\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles the while loop construct:\r\n * many [condition]\r\n *\r\n * Produces:\r\n * while(condition) {\r\n */\r\nfunction handleMany(parseContext)\r\n{\r\n  expectToken('many', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: many\r\n  tokens.shift();\r\n\r\n  var statement = 'while (';\r\n  stateStack.push(StateEnum.CONTROL_FLOW);\r\n  statement += parseStatements(parseContext);\r\n  stateStack.pop();\r\n  statement += ') {\\n';\r\n\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Determines appropriate way to invoke a function whether it has args or not\r\n * @param functionName the name of the function\r\n * @param tokens the set of tokens remaining, if the given tokens does not begin with a `with` token a syntax error will be thrown\r\n * @param allowedSyntax a description of the allowed syntax to invoke the function (in case the syntax is incorrect)\r\n */\r\nfunction functionInvocation(functionName, parseContext, allowedSyntax)\r\n{\r\n  var tokens = parseContext.tokens;\r\n\r\n  // no more args\r\n  if(tokens.length < 1)\r\n  {\r\n    // if ends with & we are chaining a call\r\n    if(functionName.endsWith('&'))\r\n    {\r\n      // remove & from functionName\r\n      return functionName.slice(0,-1) + '()\\n';\r\n    }\r\n\r\n    return functionName + '();\\n';\r\n  }\r\n\r\n  // chaining a call with the use of thx\r\n  if( tokens[0] === 'thx')\r\n  {\r\n    // consume: thx\r\n    tokens.shift();\r\n    return functionName +'()';\r\n  }\r\n\r\n  // args have to be declared with a `with`\r\n  if (tokens[0] !== 'with')\r\n  {\r\n    throw new Error(`Invalid parse state! Expected: 'with' but got: '${tokens[0]}' from chain: [${tokens}]. Allowed construct: ${allowedSyntax}`);\r\n  }\r\n\r\n  return functionName + handleWith(parseContext);\r\n}\r\n\r\n/**\r\n * Handles invoking a function:\r\n * plz <function_name> [with <args>]\r\n *\r\n * Produces:\r\n *  plz function_name([args])\r\n */\r\nfunction handlePlz(parseContext)\r\n{\r\n  expectAnyToken(['plz', '.plz'], parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: plz/.plz\r\n  var invocation = tokens.shift();\r\n\r\n  var statement = '';\r\n  // if it's a .plz we're chaning a call so append the .\r\n  if(invocation.charAt(0) === '.')\r\n  {\r\n    statement += '.';\r\n  }\r\n\r\n  var functionName = tokens.shift();\r\n\r\n  // check if function invocation is special name\r\n  if(functionName === 'console.loge')\r\n  {\r\n    functionName = functionName.slice(0, -1);\r\n  }\r\n\r\n  statement += functionInvocation(functionName, parseContext, 'plz|.plz <function_name> [with <args>]');\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles invoking a function on an object:\r\n *  <object> dose <function_name> [with <args>]\r\n *  dose <function_name> [with <args>]\r\n *\r\n * Produces:\r\n *  object.function_name([args])\r\n *  .function_name([args])\r\n */\r\nfunction handleDose(parseContext)\r\n{\r\n  var tokens = parseContext.tokens;\r\n\r\n  if(tokens[0] !== 'dose' && tokens[1] !== 'dose')\r\n  {\r\n    throw new Error(`Invalid parse state! Expected 'dose' in either 'x dose y' or 'dose y' but got chain: [${tokens}]`);\r\n  }\r\n\r\n  var objectName = '';\r\n\r\n  // if dose is the first token, we're chaining a previous call\r\n  if(tokens[1] === 'dose')\r\n  {\r\n    // object dose func\r\n    objectName = tokens.shift();\r\n  }\r\n\r\n  // consume: dose\r\n  tokens.shift();\r\n\r\n  var statement = objectName + '.';\r\n  var functionName = tokens.shift();\r\n\r\n  // check if function invocation is special name\r\n  if(functionName === 'loge' )\r\n  {\r\n    // only replace if objectName is console\r\n    if(objectName === 'console')\r\n    {\r\n      functionName = functionName.slice(0, -1);\r\n    }\r\n  }\r\n\r\n  statement += functionInvocation(functionName, parseContext, '[<object>] dose <function_name> [with <args>]');\r\n  return statement;\r\n}\r\n\r\n /**\r\n  * Handles the increment and decrement unary operators in either pre or postfix form:\r\n  *  <identifier> bigify|smallify\r\n  *  bigify|smallify <identifier>\r\n  *\r\n  * Produces:\r\n  *  identifier++ | identifier--\r\n  *  ++identifier | --identifier\r\n  */\r\nfunction handleIncrementDecrement(parseContext)\r\n{\r\n  if(!containsIncrementDecrement(parseContext))\r\n  {\r\n    throw new Error(`Invalid parse state! Expected an operator from: ${incrementDecrementOps} in either '<identifier> operator' or 'operator <identifer>' but got chain: [${tokens}]`);\r\n  }\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // prefix\r\n  if(unaryOps.hasOwnProperty(tokens[0]))\r\n  {\r\n    return unaryOps[tokens.shift()] + tokens.shift()\r\n  }\r\n\r\n  // postfix\r\n  return tokens.shift() + unaryOps[tokens.shift()]\r\n}\r\n\r\n/**\r\n * Handles variable declaration:\r\n *  very <variable> is <value>\r\n *\r\n * Produces:\r\n *  var <variable> = <value>;\r\n */\r\nfunction handleVery(parseContext) {\r\n  expectToken('very', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume: very\r\n  tokens.shift();\r\n\r\n  var statement = 'var ' + tokens.shift() + ' = ';\r\n\r\n  // consume:is/as\r\n  tokens.shift();\r\n\r\n  if (tokens[0] === 'new') {\r\n    statement += handleNew(parseContext);\r\n    return statement;\r\n  }\r\n\r\n  if (tokens[0] === 'much') {\r\n    var anonStatement = functionHandlers.handleLambda(parseContext);\r\n    statement += anonStatement;\r\n    return statement;\r\n  }\r\n\r\n  if (tokens[0] === 'obj') {\r\n    // consume obj\r\n    tokens.shift();\r\n    statement += '{\\n';\r\n    multiLine = true;\r\n    return statement;\r\n  }\r\n\r\n  // the condition check below needs fixing so we can resolve this with just parseStatement\r\n  if (tokens[0] === 'classy') {\r\n    statement += classHandlers.handleClass(parseContext);\r\n    return statement;\r\n  }\r\n\r\n  if (tokens.length > 1) {\r\n    statement += parseStatement(parseContext);\r\n\r\n    if(!shouldCloseStatement(parseContext, statement))\r\n    {\r\n      return statement;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    statement += tokens.shift();\r\n  }\r\n\r\n  statement += ';\\n';\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Handles property accession with an index:\r\n *  <object> levl <key>\r\n *\r\n * Produces:\r\n *  object[key];\r\n */\r\nfunction handleLevl(parseContext)\r\n{\r\n  expectToken('levl', parseContext);\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // consume levl\r\n  tokens.shift();\r\n\r\n  // there should be a next token\r\n  if (tokens.length < 1) {\r\n    throw new SyntaxError(`Expected argument but got nothing. Allowed construct: obj levl [arg]. ${parseInfo(parseContext)}`);\r\n  }\r\n\r\n  return `[${tokens.shift()}]`;\r\n}\r\n\r\n/**\r\n * Handles explicit return:\r\n *  amaze <expression>\r\n *\r\n * Produces:\r\n *  return <expression>;\r\n */\r\nfunction handleAmaze(parseContext) {\r\n  expectToken('amaze', parseContext);\r\n\r\n  // consume: amaze\r\n  parseContext.tokens.shift();\r\n\r\n  return \"return \" + returnStatements(parseContext);\r\n}\r\n\r\n/**\r\n * Creates the statement needed when declaring arguments.\r\n *\r\n * Given: [a, b, c]\r\n *\r\n * Produces:\r\n * ' (a, b, c) { \\n'\r\n */\r\nfunction declareArguments(parseContext) {\r\n  var tokens = parseContext.tokens;\r\n\r\n  var statement = ' (';\r\n  let arg;\r\n  while(arg = tokens.shift())\r\n  {\r\n    statement += arg;\r\n    if(tokens.length > 0)\r\n    {\r\n      statement += ', ';\r\n    }\r\n  }\r\n  statement += ') { \\n';\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Appends statements from the parse context into a single line\r\n */\r\nfunction returnStatements(parseContext)\r\n{\r\n  var statement = parseStatements(parseContext);\r\n  if(shouldCloseStatement(parseContext, statement))\r\n  {\r\n    statement += ';\\n';\r\n  }\r\n\r\n  return statement;\r\n}\r\n\r\nfunction parseStatement(parseContext) {\r\n\r\n  var tokens = parseContext.tokens;\r\n\r\n  // if processing multi-comment\r\n  if(multiComment)\r\n  {\r\n    // consume tokens until we encounter loud\r\n    if(tokens[0] !== 'loud')\r\n    {\r\n      // clear out tokens\r\n      parseContext.tokens = [];\r\n      return parseContext.input + '\\n';\r\n    }\r\n    // else must be loud\r\n    return handleLoud(parseContext);\r\n  }\r\n\r\n  // not dogescript, such javascript\r\n  if ( !isDogescriptSource(parseContext) )\r\n  {\r\n    return joinTokens(tokens) + '\\n';\r\n  }\r\n\r\n  // trained use strict\r\n  if (tokens[0] === 'trained') {\r\n    // consume: trained\r\n    tokens.shift();\r\n    return '\"use strict\";\\n';\r\n  }\r\n\r\n  // such function\r\n  if (tokens[0] === 'such') {\r\n      return functionHandlers.handleSuch(parseContext);\r\n  }\r\n\r\n  if ( tokens[0] === 'wow' || tokens[0] === 'wow&' )\r\n  {\r\n    return handleWow(parseContext);\r\n  }\r\n\r\n  // plz execute function\r\n  if(tokens[0] === 'plz' || tokens[0] === '.plz')\r\n  {\r\n    return handlePlz(parseContext);\r\n  }\r\n  // obj dose function\r\n  if(tokens[0] === 'dose' || tokens[1] === 'dose')\r\n  {\r\n    return handleDose(parseContext);\r\n  }\r\n\r\n  // very new variable\r\n  if (tokens[0] === 'very') {\r\n    return handleVery(parseContext);\r\n  }\r\n\r\n  // only applicable to disambiguate during control flow parsing\r\n  if ( hasState(StateEnum.CONTROL_FLOW) )\r\n  {\r\n    // convert to supported operator / otherwise fall thorugh\r\n    // TODO remove operators as they become supported\r\n    if(validOperators.hasOwnProperty(tokens[0]))\r\n    {\r\n      return validOperators[tokens.shift()];\r\n    }\r\n  }\r\n\r\n  // support any kind of assignment operator\r\n  if(assignOps.hasOwnProperty(tokens[0]))\r\n  {\r\n    var statement = assignOps[tokens.shift()];\r\n\r\n    if (tokens[0] === 'new') {\r\n      statement += handleNew(parseContext);\r\n      return statement;\r\n    }\r\n\r\n    statement += parseStatement(parseContext);\r\n\r\n    if(shouldCloseStatement(parseContext, statement))\r\n    {\r\n      statement += ';\\n';\r\n    }\r\n\r\n    return statement;\r\n  }\r\n\r\n  // shh comment\r\n  if (tokens[0] === 'shh') {\r\n    return handleShh(parseContext);\r\n  }\r\n\r\n  // quiet start multi-line comment\r\n  if (tokens[0] === 'quiet') {\r\n    return handleQuiet(parseContext);\r\n  }\r\n\r\n  // rly if\r\n  if (tokens[0] === 'rly') {\r\n    return handleRly(parseContext);\r\n  }\r\n\r\n  // ntrly if\r\n  if (tokens[0] === 'notrly')\r\n  {\r\n    return handleNotrly(parseContext);\r\n  }\r\n\r\n  // but else\r\n  if (tokens[0] === 'but') {\r\n    return handleBut(parseContext);\r\n  }\r\n\r\n  // many while\r\n  if (tokens[0] === 'many') {\r\n    return  handleMany(parseContext);\r\n  }\r\n\r\n  // much for\r\n  if (tokens[0] === 'much') {\r\n    return handleMuchLoop(parseContext);\r\n  }\r\n\r\n  // so require\r\n  if (tokens[0] === 'so') {\r\n    return handleSo(parseContext);\r\n  }\r\n\r\n  // maybe boolean operator\r\n  if (tokens[0] === 'maybe') {\r\n      // consume: maybe\r\n      tokens.shift();\r\n      return '(!!+Math.round(Math.random()))';\r\n  }\r\n\r\n  if (tokens[0] === 'next') {\r\n    // consume next\r\n    tokens.shift();\r\n    return ';';\r\n  }\r\n\r\n  // standalone increment/decrement\r\n  if(containsIncrementDecrement(parseContext))\r\n  {\r\n    // ignore operators that should have been snagged by control flow elements (removed once control flow consumes tokens)\r\n    if(controlFlowTokens.indexOf(tokens[0]) === -1)\r\n    {\r\n      return handleIncrementDecrement(parseContext);\r\n    }\r\n  }\r\n\r\n  if(tokens[0] === 'woof')\r\n  {\r\n    return handleWoof(parseContext);\r\n  }\r\n\r\n  if(tokens[0] === 'debooger' || tokens[0] === 'pawse')\r\n  {\r\n    // consume: debooger/pawse\r\n    tokens.shift();\r\n    return 'debugger;'\r\n  }\r\n\r\n  if (tokens[0] === 'obj') {\r\n    // consume obj\r\n    tokens.shift();\r\n    multiLine = true;\r\n    return '{\\n';\r\n  }\r\n\r\n  if (isBinaryOperator(tokens[0]))\r\n  {\r\n    var statement = binaryOperators[tokens.shift()];\r\n    if(tokens.length > 0)\r\n    {\r\n      statement += ' ';\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  if (tokens[0] === 'giv') {\r\n    // consume giv\r\n    tokens.shift();\r\n    return '.';\r\n  }\r\n\r\n  if (tokens[0] === 'levl') {\r\n    return handleLevl(parseContext);\r\n  }\r\n\r\n  if (tokens[0] === 'amaze') {\r\n    return handleAmaze(parseContext);\r\n  }\r\n\r\n  if (tokens[0] === 'classy') {\r\n    return classHandlers.handleClass(parseContext);\r\n  }\r\n\r\n  if (tokens[0] === 'maker') {\r\n    return classHandlers.handleMaker(parseContext);\r\n  }\r\n\r\n  if (tokens[0] === 'git') {\r\n    return classHandlers.handleGit(parseContext);\r\n  }\r\n\r\n  if (tokens[0] === 'sit') {\r\n    return classHandlers.handleSit(parseContext);\r\n  }\r\n\r\n  var statement = tokens.shift();\r\n  // if there's more tokens, split them by a ' ' similar to how joinTokens would work\r\n  if(tokens.length > 0)\r\n  {\r\n    statement += ' ';\r\n  }\r\n  return statement;\r\n}\r\n\r\n/**\r\n * Consumes every token in the parseContext, appending each found statement and returning all statements found.\r\n */\r\nfunction parseStatements(parseContext)\r\n{\r\n  var statements = '';\r\n\r\n  while(parseContext.tokens.length > 0)\r\n  {\r\n    statements += parseStatement(parseContext);\r\n  }\r\n\r\n  return statements;\r\n}\r\n\r\nvar replacements = {};\r\nreplacements['dogeument']='document'\r\nreplacements['windoge']='window'\r\nreplacements['dis']='this'\r\n\r\nmodule.exports = function parse (line) {\r\n\r\n    var tokens = tokenizer.tokenize(line);\r\n\r\n    if (tokens.length == 0)\r\n    {\r\n      return line + '\\n';\r\n    }\r\n\r\n    var parseContext = {\r\n      input: line,\r\n      // leave original tokens to throw better syntax errors\r\n      inputTokens: tokens.slice(),\r\n      tokens: tokens\r\n    };\r\n\r\n    // pre-process tokens and swap replacements\r\n    for(let i = 0; i < tokens.length; i ++)\r\n    {\r\n      var testToken = tokens[i];\r\n\r\n      // if we see a shh, skip since everything should be preserved\r\n      if(testToken === 'shh')\r\n      {\r\n        break;\r\n      }\r\n\r\n      Object.keys(replacements).forEach(function(key) {\r\n\r\n        if(testToken === key)\r\n        {\r\n          tokens[i] = replacements[key];\r\n        }\r\n\r\n        if(testToken.startsWith(key+'.'))\r\n        {\r\n          tokens[i] = testToken.replace(key+'.', replacements[key]+'.');\r\n        }\r\n      });\r\n    }\r\n\r\n   return parseStatements(parseContext);\r\n}\r\n"]}