658767d3332a551528c13c44f281d13b
"use strict";

var path = require("path");

var fs = require("fs");

var TMP_FOLDER_LOCATION = path.join(__dirname, '..', 'test', 'tmp');
!fs.existsSync(TMP_FOLDER_LOCATION) && fs.mkdirSync(TMP_FOLDER_LOCATION);

function cleanCRLF(str) {
  return str.trim().replace(/\r\n/gm, '\n');
}

function readCleanCRLF(fpath) {
  return fs.readFileSync(fpath, 'utf8').trim().replace(/\r\n/gm, '\n');
}

function getTmpfilePath(name) {
  return path.join(TMP_FOLDER_LOCATION, name);
}

function writeTmpFile(name, content) {
  // Create the tmp directory if it doesn't exist
  !fs.existsSync(TMP_FOLDER_LOCATION) && fs.mkdirSync(TMP_FOLDER_LOCATION); // Write the metadata to a file

  fs.writeFileSync(path.join(TMP_FOLDER_LOCATION, name), content);
}

function readTmpFile(name) {
  var fullPath = path.join(TMP_FOLDER_LOCATION, name);
  return fs.readFileSync(fullPath, 'utf8');
}

function deleteTmpFolder() {
  if (!fs.existsSync(TMP_FOLDER_LOCATION)) {
    throw new Exception("Failed to delete files in " + TMP_FOLDER_LOCATION);
  }

  fs.readdirSync(TMP_FOLDER_LOCATION).forEach(function (file) {
    var curPath = path.join(TMP_FOLDER_LOCATION, file);
    var isDirectory = fs.lstatSync(curPath).isDirectory();

    if (isDirectory) {
      // recurse
      deleteTmpFolder(curPath);
    } else {
      // Single file, delete it
      fs.unlinkSync(curPath);
    }
  }); // Finally, erase the folder

  fs.rmdirSync(TMP_FOLDER_LOCATION);
}

;
module.exports = {
  cleanCRLF: cleanCRLF,
  deleteTmpFolder: deleteTmpFolder,
  getTmpfilePath: getTmpfilePath,
  readCleanCRLF: readCleanCRLF,
  readTmpFile: readTmpFile,
  TMP_FOLDER_LOCATION: TMP_FOLDER_LOCATION,
  writeTmpFile: writeTmpFile
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJmcyIsIlRNUF9GT0xERVJfTE9DQVRJT04iLCJqb2luIiwiX19kaXJuYW1lIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyIsImNsZWFuQ1JMRiIsInN0ciIsInRyaW0iLCJyZXBsYWNlIiwicmVhZENsZWFuQ1JMRiIsImZwYXRoIiwicmVhZEZpbGVTeW5jIiwiZ2V0VG1wZmlsZVBhdGgiLCJuYW1lIiwid3JpdGVUbXBGaWxlIiwiY29udGVudCIsIndyaXRlRmlsZVN5bmMiLCJyZWFkVG1wRmlsZSIsImZ1bGxQYXRoIiwiZGVsZXRlVG1wRm9sZGVyIiwiRXhjZXB0aW9uIiwicmVhZGRpclN5bmMiLCJmb3JFYWNoIiwiZmlsZSIsImN1clBhdGgiLCJpc0RpcmVjdG9yeSIsImxzdGF0U3luYyIsInVubGlua1N5bmMiLCJybWRpclN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBbEI7O0FBQ0EsSUFBSUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsSUFBRCxDQUFoQjs7QUFFQSxJQUFJRSxtQkFBbUIsR0FBR0gsSUFBSSxDQUFDSSxJQUFMLENBQVVDLFNBQVYsRUFBcUIsSUFBckIsRUFBMkIsTUFBM0IsRUFBbUMsS0FBbkMsQ0FBMUI7QUFFQSxDQUFDSCxFQUFFLENBQUNJLFVBQUgsQ0FBY0gsbUJBQWQsQ0FBRCxJQUF1Q0QsRUFBRSxDQUFDSyxTQUFILENBQWFKLG1CQUFiLENBQXZDOztBQUVBLFNBQVNLLFNBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCO0FBQ3RCLFNBQU9BLEdBQUcsQ0FBQ0MsSUFBSixHQUFXQyxPQUFYLENBQW1CLFFBQW5CLEVBQTZCLElBQTdCLENBQVA7QUFDRDs7QUFFRCxTQUFTQyxhQUFULENBQXVCQyxLQUF2QixFQUE4QjtBQUM1QixTQUFPWCxFQUFFLENBQUNZLFlBQUgsQ0FBZ0JELEtBQWhCLEVBQXVCLE1BQXZCLEVBQ0pILElBREksR0FFSkMsT0FGSSxDQUVJLFFBRkosRUFFYyxJQUZkLENBQVA7QUFHRDs7QUFFRCxTQUFTSSxjQUFULENBQXdCQyxJQUF4QixFQUE4QjtBQUM1QixTQUFPaEIsSUFBSSxDQUFDSSxJQUFMLENBQVVELG1CQUFWLEVBQStCYSxJQUEvQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsWUFBVCxDQUFzQkQsSUFBdEIsRUFBNEJFLE9BQTVCLEVBQXFDO0FBQ25DO0FBQ0EsR0FBQ2hCLEVBQUUsQ0FBQ0ksVUFBSCxDQUFjSCxtQkFBZCxDQUFELElBQXVDRCxFQUFFLENBQUNLLFNBQUgsQ0FBYUosbUJBQWIsQ0FBdkMsQ0FGbUMsQ0FJbkM7O0FBQ0FELEVBQUFBLEVBQUUsQ0FBQ2lCLGFBQUgsQ0FDRW5CLElBQUksQ0FBQ0ksSUFBTCxDQUFVRCxtQkFBVixFQUErQmEsSUFBL0IsQ0FERixFQUVFRSxPQUZGO0FBSUQ7O0FBRUQsU0FBU0UsV0FBVCxDQUFxQkosSUFBckIsRUFBMkI7QUFDekIsTUFBSUssUUFBUSxHQUFHckIsSUFBSSxDQUFDSSxJQUFMLENBQVVELG1CQUFWLEVBQStCYSxJQUEvQixDQUFmO0FBQ0EsU0FBT2QsRUFBRSxDQUFDWSxZQUFILENBQWdCTyxRQUFoQixFQUEwQixNQUExQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsZUFBVCxHQUEyQjtBQUN6QixNQUFJLENBQUNwQixFQUFFLENBQUNJLFVBQUgsQ0FBY0gsbUJBQWQsQ0FBTCxFQUF5QztBQUN2QyxVQUFNLElBQUlvQixTQUFKLENBQWMsK0JBQStCcEIsbUJBQTdDLENBQU47QUFDRDs7QUFFREQsRUFBQUEsRUFBRSxDQUFDc0IsV0FBSCxDQUFlckIsbUJBQWYsRUFBb0NzQixPQUFwQyxDQUE0QyxVQUFTQyxJQUFULEVBQWM7QUFDeEQsUUFBSUMsT0FBTyxHQUFHM0IsSUFBSSxDQUFDSSxJQUFMLENBQVVELG1CQUFWLEVBQStCdUIsSUFBL0IsQ0FBZDtBQUNBLFFBQUlFLFdBQVcsR0FBRzFCLEVBQUUsQ0FBQzJCLFNBQUgsQ0FBYUYsT0FBYixFQUFzQkMsV0FBdEIsRUFBbEI7O0FBRUEsUUFBSUEsV0FBSixFQUFpQjtBQUFFO0FBQ2pCTixNQUFBQSxlQUFlLENBQUNLLE9BQUQsQ0FBZjtBQUNELEtBRkQsTUFFTztBQUFFO0FBQ1B6QixNQUFBQSxFQUFFLENBQUM0QixVQUFILENBQWNILE9BQWQ7QUFDRDtBQUNGLEdBVEQsRUFMeUIsQ0FnQnpCOztBQUNBekIsRUFBQUEsRUFBRSxDQUFDNkIsU0FBSCxDQUFhNUIsbUJBQWI7QUFDRDs7QUFBQTtBQUVENkIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2Z6QixFQUFBQSxTQUFTLEVBQVRBLFNBRGU7QUFFZmMsRUFBQUEsZUFBZSxFQUFmQSxlQUZlO0FBR2ZQLEVBQUFBLGNBQWMsRUFBZEEsY0FIZTtBQUlmSCxFQUFBQSxhQUFhLEVBQWJBLGFBSmU7QUFLZlEsRUFBQUEsV0FBVyxFQUFYQSxXQUxlO0FBTWZqQixFQUFBQSxtQkFBbUIsRUFBbkJBLG1CQU5lO0FBT2ZjLEVBQUFBLFlBQVksRUFBWkE7QUFQZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbnZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKVxyXG5cclxudmFyIFRNUF9GT0xERVJfTE9DQVRJT04gPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAndGVzdCcsICd0bXAnKTtcclxuXHJcbiFmcy5leGlzdHNTeW5jKFRNUF9GT0xERVJfTE9DQVRJT04pICYmIGZzLm1rZGlyU3luYyhUTVBfRk9MREVSX0xPQ0FUSU9OKTtcclxuXHJcbmZ1bmN0aW9uIGNsZWFuQ1JMRihzdHIpIHtcclxuICByZXR1cm4gc3RyLnRyaW0oKS5yZXBsYWNlKC9cXHJcXG4vZ20sICdcXG4nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZENsZWFuQ1JMRihmcGF0aCkge1xyXG4gIHJldHVybiBmcy5yZWFkRmlsZVN5bmMoZnBhdGgsICd1dGY4JylcclxuICAgIC50cmltKClcclxuICAgIC5yZXBsYWNlKC9cXHJcXG4vZ20sICdcXG4nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG1wZmlsZVBhdGgobmFtZSkge1xyXG4gIHJldHVybiBwYXRoLmpvaW4oVE1QX0ZPTERFUl9MT0NBVElPTiwgbmFtZSlcclxufVxyXG5cclxuZnVuY3Rpb24gd3JpdGVUbXBGaWxlKG5hbWUsIGNvbnRlbnQpIHtcclxuICAvLyBDcmVhdGUgdGhlIHRtcCBkaXJlY3RvcnkgaWYgaXQgZG9lc24ndCBleGlzdFxyXG4gICFmcy5leGlzdHNTeW5jKFRNUF9GT0xERVJfTE9DQVRJT04pICYmIGZzLm1rZGlyU3luYyhUTVBfRk9MREVSX0xPQ0FUSU9OKTtcclxuXHJcbiAgLy8gV3JpdGUgdGhlIG1ldGFkYXRhIHRvIGEgZmlsZVxyXG4gIGZzLndyaXRlRmlsZVN5bmMoXHJcbiAgICBwYXRoLmpvaW4oVE1QX0ZPTERFUl9MT0NBVElPTiwgbmFtZSksXHJcbiAgICBjb250ZW50LFxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRUbXBGaWxlKG5hbWUpIHtcclxuICB2YXIgZnVsbFBhdGggPSBwYXRoLmpvaW4oVE1QX0ZPTERFUl9MT0NBVElPTiwgbmFtZSlcclxuICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGZ1bGxQYXRoLCAndXRmOCcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWxldGVUbXBGb2xkZXIoKSB7XHJcbiAgaWYgKCFmcy5leGlzdHNTeW5jKFRNUF9GT0xERVJfTE9DQVRJT04pKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiRmFpbGVkIHRvIGRlbGV0ZSBmaWxlcyBpbiBcIiArIFRNUF9GT0xERVJfTE9DQVRJT04pO1xyXG4gIH1cclxuXHJcbiAgZnMucmVhZGRpclN5bmMoVE1QX0ZPTERFUl9MT0NBVElPTikuZm9yRWFjaChmdW5jdGlvbihmaWxlKXtcclxuICAgIHZhciBjdXJQYXRoID0gcGF0aC5qb2luKFRNUF9GT0xERVJfTE9DQVRJT04sIGZpbGUpO1xyXG4gICAgdmFyIGlzRGlyZWN0b3J5ID0gZnMubHN0YXRTeW5jKGN1clBhdGgpLmlzRGlyZWN0b3J5KCk7XHJcblxyXG4gICAgaWYgKGlzRGlyZWN0b3J5KSB7IC8vIHJlY3Vyc2VcclxuICAgICAgZGVsZXRlVG1wRm9sZGVyKGN1clBhdGgpO1xyXG4gICAgfSBlbHNlIHsgLy8gU2luZ2xlIGZpbGUsIGRlbGV0ZSBpdFxyXG4gICAgICBmcy51bmxpbmtTeW5jKGN1clBhdGgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBGaW5hbGx5LCBlcmFzZSB0aGUgZm9sZGVyXHJcbiAgZnMucm1kaXJTeW5jKFRNUF9GT0xERVJfTE9DQVRJT04pO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgY2xlYW5DUkxGLFxyXG4gIGRlbGV0ZVRtcEZvbGRlcixcclxuICBnZXRUbXBmaWxlUGF0aCxcclxuICByZWFkQ2xlYW5DUkxGLFxyXG4gIHJlYWRUbXBGaWxlLFxyXG4gIFRNUF9GT0xERVJfTE9DQVRJT04sXHJcbiAgd3JpdGVUbXBGaWxlLFxyXG59Il19