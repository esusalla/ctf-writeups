cd29b776702f33a79682cd4563c0ccf7
/* istanbul ignore next */
"use strict";

var cov_tv82vi4ex = function () {
  var path = "/mnt/j/Workspaces/dogescript/lib/handlers/functionHandlers.js";
  var hash = "3852c449a6478d2e804dd7542a5462ed81dd74c6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/j/Workspaces/dogescript/lib/handlers/functionHandlers.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 1,
          column: 46
        }
      },
      "1": {
        start: {
          line: 2,
          column: 19
        },
        end: {
          line: 2,
          column: 50
        }
      },
      "2": {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "3": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 34
        }
      },
      "4": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 18,
          column: 17
        }
      },
      "5": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 35
        }
      },
      "6": {
        start: {
          line: 21,
          column: 18
        },
        end: {
          line: 21,
          column: 44
        }
      },
      "7": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "8": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 34
        }
      },
      "9": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "10": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 204
        }
      },
      "11": {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 35,
          column: 44
        }
      },
      "12": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 36,
          column: 19
        }
      },
      "13": {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 51,
          column: 47
        }
      },
      "14": {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 54,
          column: 30
        }
      },
      "15": {
        start: {
          line: 56,
          column: 2
        },
        end: {
          line: 56,
          column: 53
        }
      },
      "16": {
        start: {
          line: 68,
          column: 2
        },
        end: {
          line: 68,
          column: 51
        }
      },
      "17": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 74,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "handleSuch",
        decl: {
          start: {
            line: 11,
            column: 9
          },
          end: {
            line: 11,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 0
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "handleMuchArgs",
        decl: {
          start: {
            line: 49,
            column: 9
          },
          end: {
            line: 49,
            column: 23
          }
        },
        loc: {
          start: {
            line: 50,
            column: 0
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 50
      },
      "2": {
        name: "handleLambda",
        decl: {
          start: {
            line: 66,
            column: 9
          },
          end: {
            line: 66,
            column: 21
          }
        },
        loc: {
          start: {
            line: 67,
            column: 0
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 67
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        }, {
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        }],
        line: 30
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "3852c449a6478d2e804dd7542a5462ed81dd74c6"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var tokenUtils =
/* istanbul ignore next */
(cov_tv82vi4ex.s[0]++, require('../util/tokenUtils'));
var handlerUtils =
/* istanbul ignore next */
(cov_tv82vi4ex.s[1]++, require('../util/handlerUtils'));
/**
 * Handles the such construct:
 *  such <function_name> [much]
 *
 * Produces:
 *  function <function_name> ([args]) {
 */

function handleSuch(parseContext) {
  /* istanbul ignore next */
  cov_tv82vi4ex.f[0]++;
  cov_tv82vi4ex.s[2]++;
  tokenUtils.expectToken('such', parseContext);
  var tokens =
  /* istanbul ignore next */
  (cov_tv82vi4ex.s[3]++, parseContext.tokens); // consume: such

  /* istanbul ignore next */
  cov_tv82vi4ex.s[4]++;
  tokens.shift();
  var functionName =
  /* istanbul ignore next */
  (cov_tv82vi4ex.s[5]++, tokens.shift());
  var statement =
  /* istanbul ignore next */
  (cov_tv82vi4ex.s[6]++, 'function ' + functionName); // no args

  /* istanbul ignore next */
  cov_tv82vi4ex.s[7]++;

  if (!tokens[0]) {
    /* istanbul ignore next */
    cov_tv82vi4ex.b[0][0]++;
    cov_tv82vi4ex.s[8]++;
    return statement + ' () { \n';
  } else
  /* istanbul ignore next */
  {
    cov_tv82vi4ex.b[0][1]++;
  } // args have to be declared with much


  cov_tv82vi4ex.s[9]++;

  if (tokens[0] !== 'much') {
    /* istanbul ignore next */
    cov_tv82vi4ex.b[1][0]++;
    cov_tv82vi4ex.s[10]++;
    throw new Error(
    /* istanbul ignore next */
    "Invalid parse state! Expected: 'much' but got: '".concat(tokens[0], "' from chain: [").concat(tokens, "]. Allowed construct 'such <function_name> [much <args>]'. ").concat(tokenUtils.parseInfo(parseContext)));
  } else
  /* istanbul ignore next */
  {
    cov_tv82vi4ex.b[1][1]++;
  }

  cov_tv82vi4ex.s[11]++;
  statement += handleMuchArgs(parseContext);

  /* istanbul ignore next */
  cov_tv82vi4ex.s[12]++;
  return statement;
}
/**
 * Handles arguments to functions:
 *  much [args]
 *
 * Produces the argument part to a preceding function:
 *  ([args]) {
 *
 * Assuming that the function_name was encountered before this should ultimately produce:
 *  function([args]) {
 */


function handleMuchArgs(parseContext) {
  /* istanbul ignore next */
  cov_tv82vi4ex.f[1]++;
  cov_tv82vi4ex.s[13]++;
  tokenUtils.expectToken('much', parseContext); // consume: much

  /* istanbul ignore next */
  cov_tv82vi4ex.s[14]++;
  parseContext.tokens.shift();

  /* istanbul ignore next */
  cov_tv82vi4ex.s[15]++;
  return handlerUtils.declareArguments(parseContext);
}
/**
 * Handles lambda functions ( thanks @00Davo!):
 *  much [args]
 *
 * Produces:
 *  function (args) {
 */


function handleLambda(parseContext) {
  /* istanbul ignore next */
  cov_tv82vi4ex.f[2]++;
  cov_tv82vi4ex.s[16]++;
  return 'function' + handleMuchArgs(parseContext);
}

/* istanbul ignore next */
cov_tv82vi4ex.s[17]++;
module.exports = {
  handleSuch: handleSuch,
  handleLambda: handleLambda
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmN0aW9uSGFuZGxlcnMuanMiXSwibmFtZXMiOlsidG9rZW5VdGlscyIsInJlcXVpcmUiLCJoYW5kbGVyVXRpbHMiLCJoYW5kbGVTdWNoIiwicGFyc2VDb250ZXh0IiwiZXhwZWN0VG9rZW4iLCJ0b2tlbnMiLCJzaGlmdCIsImZ1bmN0aW9uTmFtZSIsInN0YXRlbWVudCIsIkVycm9yIiwicGFyc2VJbmZvIiwiaGFuZGxlTXVjaEFyZ3MiLCJkZWNsYXJlQXJndW1lbnRzIiwiaGFuZGxlTGFtYmRhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsVUFBVTtBQUFBO0FBQUEsdUJBQUdDLE9BQU8sQ0FBQyxvQkFBRCxDQUFWLENBQWQ7QUFDQSxJQUFJQyxZQUFZO0FBQUE7QUFBQSx1QkFBR0QsT0FBTyxDQUFDLHNCQUFELENBQVYsQ0FBaEI7QUFFQTs7Ozs7Ozs7QUFPQSxTQUFTRSxVQUFULENBQW9CQyxZQUFwQixFQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0VKLEVBQUFBLFVBQVUsQ0FBQ0ssV0FBWCxDQUF1QixNQUF2QixFQUErQkQsWUFBL0I7QUFFQSxNQUFJRSxNQUFNO0FBQUE7QUFBQSx5QkFBR0YsWUFBWSxDQUFDRSxNQUFoQixDQUFWLENBSEYsQ0FLRTs7QUFMRjtBQUFBO0FBTUVBLEVBQUFBLE1BQU0sQ0FBQ0MsS0FBUDtBQUVBLE1BQUlDLFlBQVk7QUFBQTtBQUFBLHlCQUFHRixNQUFNLENBQUNDLEtBQVAsRUFBSCxDQUFoQjtBQUNBLE1BQUlFLFNBQVM7QUFBQTtBQUFBLHlCQUFHLGNBQWNELFlBQWpCLENBQWIsQ0FURixDQVdFOztBQVhGO0FBQUE7O0FBWUUsTUFBSSxDQUFDRixNQUFNLENBQUMsQ0FBRCxDQUFYLEVBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDRSxXQUFPRyxTQUFTLEdBQUcsVUFBbkI7QUFDRCxHQUhEO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FaRixDQWlCRTs7O0FBakJGOztBQWtCRSxNQUFJSCxNQUFNLENBQUMsQ0FBRCxDQUFOLEtBQWMsTUFBbEIsRUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNFLFVBQU0sSUFBSUksS0FBSjtBQUFBO0FBQUEsOERBQTZESixNQUFNLENBQUMsQ0FBRCxDQUFuRSw0QkFBd0ZBLE1BQXhGLHdFQUE0Sk4sVUFBVSxDQUFDVyxTQUFYLENBQXFCUCxZQUFyQixDQUE1SixFQUFOO0FBQ0QsR0FIRDtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWxCRjtBQXVCRUssRUFBQUEsU0FBUyxJQUFJRyxjQUFjLENBQUNSLFlBQUQsQ0FBM0I7O0FBdkJGO0FBQUE7QUF3QkUsU0FBT0ssU0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7OztBQVVBLFNBQVNHLGNBQVQsQ0FBd0JSLFlBQXhCLEVBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDRUosRUFBQUEsVUFBVSxDQUFDSyxXQUFYLENBQXVCLE1BQXZCLEVBQStCRCxZQUEvQixFQURGLENBR0U7O0FBSEY7QUFBQTtBQUlFQSxFQUFBQSxZQUFZLENBQUNFLE1BQWIsQ0FBb0JDLEtBQXBCOztBQUpGO0FBQUE7QUFNRSxTQUFPTCxZQUFZLENBQUNXLGdCQUFiLENBQThCVCxZQUE5QixDQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7O0FBT0EsU0FBU1UsWUFBVCxDQUFzQlYsWUFBdEIsRUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNFLFNBQU8sYUFBYVEsY0FBYyxDQUFDUixZQUFELENBQWxDO0FBQ0Q7Ozs7QUFFRFcsTUFBTSxDQUFDQyxPQUFQLEdBQWdCO0FBQ1piLEVBQUFBLFVBQVUsRUFBVkEsVUFEWTtBQUVaVyxFQUFBQSxZQUFZLEVBQVpBO0FBRlksQ0FBaEIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9rZW5VdGlscyA9IHJlcXVpcmUoJy4uL3V0aWwvdG9rZW5VdGlscycpO1xyXG52YXIgaGFuZGxlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbC9oYW5kbGVyVXRpbHMnKTtcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHRoZSBzdWNoIGNvbnN0cnVjdDpcclxuICogIHN1Y2ggPGZ1bmN0aW9uX25hbWU+IFttdWNoXVxyXG4gKlxyXG4gKiBQcm9kdWNlczpcclxuICogIGZ1bmN0aW9uIDxmdW5jdGlvbl9uYW1lPiAoW2FyZ3NdKSB7XHJcbiAqL1xyXG5mdW5jdGlvbiBoYW5kbGVTdWNoKHBhcnNlQ29udGV4dClcclxue1xyXG4gIHRva2VuVXRpbHMuZXhwZWN0VG9rZW4oJ3N1Y2gnLCBwYXJzZUNvbnRleHQpO1xyXG5cclxuICB2YXIgdG9rZW5zID0gcGFyc2VDb250ZXh0LnRva2VucztcclxuXHJcbiAgLy8gY29uc3VtZTogc3VjaFxyXG4gIHRva2Vucy5zaGlmdCgpO1xyXG5cclxuICB2YXIgZnVuY3Rpb25OYW1lID0gdG9rZW5zLnNoaWZ0KCk7XHJcbiAgdmFyIHN0YXRlbWVudCA9ICdmdW5jdGlvbiAnICsgZnVuY3Rpb25OYW1lO1xyXG5cclxuICAvLyBubyBhcmdzXHJcbiAgaWYgKCF0b2tlbnNbMF0pXHJcbiAge1xyXG4gICAgcmV0dXJuIHN0YXRlbWVudCArICcgKCkgeyBcXG4nO1xyXG4gIH1cclxuXHJcbiAgLy8gYXJncyBoYXZlIHRvIGJlIGRlY2xhcmVkIHdpdGggbXVjaFxyXG4gIGlmICh0b2tlbnNbMF0gIT09ICdtdWNoJylcclxuICB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGFyc2Ugc3RhdGUhIEV4cGVjdGVkOiAnbXVjaCcgYnV0IGdvdDogJyR7dG9rZW5zWzBdfScgZnJvbSBjaGFpbjogWyR7dG9rZW5zfV0uIEFsbG93ZWQgY29uc3RydWN0ICdzdWNoIDxmdW5jdGlvbl9uYW1lPiBbbXVjaCA8YXJncz5dJy4gJHt0b2tlblV0aWxzLnBhcnNlSW5mbyhwYXJzZUNvbnRleHQpfWApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGVtZW50ICs9IGhhbmRsZU11Y2hBcmdzKHBhcnNlQ29udGV4dCk7XHJcbiAgcmV0dXJuIHN0YXRlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgYXJndW1lbnRzIHRvIGZ1bmN0aW9uczpcclxuICogIG11Y2ggW2FyZ3NdXHJcbiAqXHJcbiAqIFByb2R1Y2VzIHRoZSBhcmd1bWVudCBwYXJ0IHRvIGEgcHJlY2VkaW5nIGZ1bmN0aW9uOlxyXG4gKiAgKFthcmdzXSkge1xyXG4gKlxyXG4gKiBBc3N1bWluZyB0aGF0IHRoZSBmdW5jdGlvbl9uYW1lIHdhcyBlbmNvdW50ZXJlZCBiZWZvcmUgdGhpcyBzaG91bGQgdWx0aW1hdGVseSBwcm9kdWNlOlxyXG4gKiAgZnVuY3Rpb24oW2FyZ3NdKSB7XHJcbiAqL1xyXG5mdW5jdGlvbiBoYW5kbGVNdWNoQXJncyhwYXJzZUNvbnRleHQpXHJcbntcclxuICB0b2tlblV0aWxzLmV4cGVjdFRva2VuKCdtdWNoJywgcGFyc2VDb250ZXh0KTtcclxuXHJcbiAgLy8gY29uc3VtZTogbXVjaFxyXG4gIHBhcnNlQ29udGV4dC50b2tlbnMuc2hpZnQoKTtcclxuXHJcbiAgcmV0dXJuIGhhbmRsZXJVdGlscy5kZWNsYXJlQXJndW1lbnRzKHBhcnNlQ29udGV4dCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIGxhbWJkYSBmdW5jdGlvbnMgKCB0aGFua3MgQDAwRGF2byEpOlxyXG4gKiAgbXVjaCBbYXJnc11cclxuICpcclxuICogUHJvZHVjZXM6XHJcbiAqICBmdW5jdGlvbiAoYXJncykge1xyXG4gKi9cclxuZnVuY3Rpb24gaGFuZGxlTGFtYmRhKHBhcnNlQ29udGV4dClcclxue1xyXG4gIHJldHVybiAnZnVuY3Rpb24nICsgaGFuZGxlTXVjaEFyZ3MocGFyc2VDb250ZXh0KTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHM9IHtcclxuICAgIGhhbmRsZVN1Y2gsXHJcbiAgICBoYW5kbGVMYW1iZGFcclxufSJdfQ==