{"version":3,"sources":["setup.js"],"names":["path","require","process","walk","util","exec","specDir","join","__dirname","getFolderName","filePath","indexOf","substring","lastIndexOf","length","getSpecFiles","specPath","Promise","resolve","testDirs","skywalker","on","fpath","children","missingExpectFile","missingSourceFile","buildProject","ROOT_DIR","buildCommand","console","log","reject","encoding","error","stdout","stderr","errorOutput","toString","stdOutput","errMsg","Error","formatSpecMetadata","testDirMapping","Object","keys","map","dir","testName","includes","relative","split","sep","module","exports","then","specMetadata","writeTmpFile","JSON","stringify"],"mappings":"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","sourcesContent":["var path = require('path');\r\nvar process = require('process');\r\nvar walk = require('walk');\r\nvar util = require('./util');\r\nconst { exec } = require('child_process');\r\n\r\n\r\nvar specDir = path.join(__dirname, 'language-spec');\r\n\r\n// TODO: Replace me.\r\nfunction getFolderName(filePath) {\r\n  // windows\r\n  if (filePath.indexOf('/') == -1) {\r\n    return filePath.substring(filePath.lastIndexOf('\\\\') + 1, filePath.length);\r\n  }\r\n\r\n  // unix\r\n  return filePath.substring(filePath.lastIndexOf('/') + 1, filePath.length);\r\n}\r\n\r\n// Returns a promise to a map of records containing\r\n// { specFileDir: { missingExpectFile: bool, missingSourceFile: bool }}\r\nfunction getSpecFiles(specPath) {\r\n  return new Promise(function (resolve,) {\r\n      var testDirs = {};\r\n      var skywalker = walk.walk(specPath);\r\n\r\n      // Walk every folder in the file tree adding any folders that;\r\n      // have an expect.js and have a source.js\r\n      skywalker.on('names', function(fpath, children) {\r\n        var missingExpectFile = children.indexOf('expect.js') === -1;\r\n        var missingSourceFile = children.indexOf('source.djs') === -1;\r\n\r\n        // Could throw an error here for invalid test format\r\n        if(missingExpectFile || missingSourceFile) return;\r\n\r\n        testDirs[fpath] = { missingExpectFile, missingSourceFile };\r\n      });\r\n\r\n      skywalker.on('end', function() {\r\n        resolve(testDirs);\r\n    });\r\n  });\r\n}\r\n\r\n// Build our project for E2E testing\r\nfunction buildProject() {\r\n  const ROOT_DIR = path.join(__dirname, '..');\r\n  const buildCommand = \"npm run build\";\r\n\r\n  console.log(\"\\n\\nðŸ›   Building dogescript...\\n\")\r\n  return new Promise((resolve, reject) => {\r\n    /**\r\n     * Compile the binary for testing\r\n     */\r\n    exec(`cd ${ROOT_DIR} && ${buildCommand}`, { encoding: 'UTF-8' }, (error, stdout, stderr) => {\r\n      const errorOutput = stderr.toString();\r\n      const stdOutput = stdout.toString();\r\n      const errMsg = \"Failed to start testing suite, compiler build failed\";\r\n\r\n      if (error || errorOutput) {\r\n        console.error(errorOutput);\r\n        console.error(stdOutput);\r\n        console.error(errMsg)\r\n        reject([\r\n          new Error(errMsg),\r\n          stdOutput,\r\n          errorOutput,\r\n        ]);\r\n      }\r\n\r\n      resolve();\r\n    });\r\n  });\r\n}\r\n\r\n// Takes a specFileMapping and transforms it into a serializable format\r\n// For the test suite to use (globals are not permitted)\r\nfunction formatSpecMetadata(testDirMapping) {\r\n  return Object\r\n    .keys(testDirMapping)\r\n    .map(function(dir) {\r\n      var testName = getFolderName(dir);\r\n\r\n      // Separate by directory if it wasnt a directory with a name-like-this\r\n      if(!testName.includes('-'))\r\n      {\r\n        var relative = path.relative(specDir, dir);\r\n        testName = relative.split(path.sep).join('-');\r\n      }\r\n\r\n      return [testName, dir];\r\n    });\r\n}\r\n\r\n// setup.js, global setup for jest\r\nmodule.exports =  function() {\r\n  return getSpecFiles(specDir)\r\n    .then(formatSpecMetadata)\r\n    .then(function (specMetadata) {\r\n      util.writeTmpFile('specMetadata.json', JSON.stringify(specMetadata));\r\n    })\r\n    .then(buildProject);\r\n};"]}