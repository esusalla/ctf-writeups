{"version":3,"sources":["tokenUtils.js"],"names":["parseInfo","parseContext","inputTokens","input","expectToken","expectedStart","tokens","Error","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,SAASA,SAAT,CAAmBC,YAAnB,EACA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA,6BAAyBA,YAAY,CAACC,WAAtC,4BAAkED,YAAY,CAACE,KAA/E;AAAA;AACD;AAED;;;;;AAGA,SAASC,WAAT,CAAqBC,aAArB,EAAoCJ,YAApC,EACA;AAAA;AAAA;AACE,MAAIK,MAAM;AAAA;AAAA,0BAAGL,YAAY,CAACK,MAAhB,CAAV;;AADF;AAAA;;AAEE,MAAKA,MAAM,CAAC,CAAD,CAAN,KAAcD,aAAnB,EACA;AAAA;AAAA;AAAA;AACE,UAAM,IAAIE,KAAJ;AAAA;AAAA,8CAA6CF,aAA7C,yBAAyEC,MAAM,CAAC,CAAD,CAA/E,4BAAoGA,MAApG,gBAAgHN,SAAS,CAACC,YAAD,CAAzH,EAAN;AACD,GAHD;AAAA;AAAA;AAAA;AAAA;AAID;;;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AACbL,EAAAA,WAAW,EAAXA,WADa;AACAJ,EAAAA,SAAS,EAATA;AADA,CAAjB","sourcesContent":["/**\r\n * Creates a formatted message that displays the token set that was parsed and the input.\r\n */\r\nfunction parseInfo(parseContext)\r\n{\r\n  return `Parsed tokens [${parseContext.inputTokens}] from input \"${parseContext.input}\"`;\r\n}\r\n\r\n/**\r\n * Raises an error if the given tokens do not start with the desired state\r\n */\r\nfunction expectToken(expectedStart, parseContext)\r\n{\r\n  var tokens = parseContext.tokens;\r\n  if ( tokens[0] !== expectedStart)\r\n  {\r\n    throw new Error(`Invalid parse state! Expected: '${expectedStart}' but got: '${tokens[0]}' from chain: [${tokens}]. ${parseInfo(parseContext)}`);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n    expectToken, parseInfo\r\n}"]}