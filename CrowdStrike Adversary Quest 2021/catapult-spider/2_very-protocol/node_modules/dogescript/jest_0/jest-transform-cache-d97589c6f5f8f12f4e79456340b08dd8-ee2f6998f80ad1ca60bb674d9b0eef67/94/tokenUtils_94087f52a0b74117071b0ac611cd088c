c82ed761c8cca8d86e132c389c65df96
/* istanbul ignore next */
"use strict";

var cov_108tryge1m = function () {
  var path = "/mnt/j/Workspaces/dogescript/lib/util/tokenUtils.js";
  var hash = "c481ef40302391920e1c8bdde1d5675a71b16c4b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/j/Workspaces/dogescript/lib/util/tokenUtils.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 6,
          column: 90
        }
      },
      "1": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 34
        }
      },
      "2": {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "3": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 149
        }
      },
      "4": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 23,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "parseInfo",
        decl: {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 18
          }
        },
        loc: {
          start: {
            line: 5,
            column: 0
          },
          end: {
            line: 7,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "expectToken",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 20
          }
        },
        loc: {
          start: {
            line: 13,
            column: 0
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 18,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 18,
            column: 3
          }
        }, {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 18,
            column: 3
          }
        }],
        line: 15
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "c481ef40302391920e1c8bdde1d5675a71b16c4b"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

/**
 * Creates a formatted message that displays the token set that was parsed and the input.
 */
function parseInfo(parseContext) {
  /* istanbul ignore next */
  cov_108tryge1m.f[0]++;
  cov_108tryge1m.s[0]++;
  return (
    /* istanbul ignore next */
    "Parsed tokens [".concat(parseContext.inputTokens, "] from input \"").concat(parseContext.input, "\"")
  );
}
/**
 * Raises an error if the given tokens do not start with the desired state
 */


function expectToken(expectedStart, parseContext) {
  /* istanbul ignore next */
  cov_108tryge1m.f[1]++;
  var tokens =
  /* istanbul ignore next */
  (cov_108tryge1m.s[1]++, parseContext.tokens);

  /* istanbul ignore next */
  cov_108tryge1m.s[2]++;

  if (tokens[0] !== expectedStart) {
    /* istanbul ignore next */
    cov_108tryge1m.b[0][0]++;
    cov_108tryge1m.s[3]++;
    throw new Error(
    /* istanbul ignore next */
    "Invalid parse state! Expected: '".concat(expectedStart, "' but got: '").concat(tokens[0], "' from chain: [").concat(tokens, "]. ").concat(parseInfo(parseContext)));
  } else
  /* istanbul ignore next */
  {
    cov_108tryge1m.b[0][1]++;
  }
}

/* istanbul ignore next */
cov_108tryge1m.s[4]++;
module.exports = {
  expectToken: expectToken,
  parseInfo: parseInfo
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRva2VuVXRpbHMuanMiXSwibmFtZXMiOlsicGFyc2VJbmZvIiwicGFyc2VDb250ZXh0IiwiaW5wdXRUb2tlbnMiLCJpbnB1dCIsImV4cGVjdFRva2VuIiwiZXhwZWN0ZWRTdGFydCIsInRva2VucyIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0FBR0EsU0FBU0EsU0FBVCxDQUFtQkMsWUFBbkIsRUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNFO0FBQUE7QUFBQSw2QkFBeUJBLFlBQVksQ0FBQ0MsV0FBdEMsNEJBQWtFRCxZQUFZLENBQUNFLEtBQS9FO0FBQUE7QUFDRDtBQUVEOzs7OztBQUdBLFNBQVNDLFdBQVQsQ0FBcUJDLGFBQXJCLEVBQW9DSixZQUFwQyxFQUNBO0FBQUE7QUFBQTtBQUNFLE1BQUlLLE1BQU07QUFBQTtBQUFBLDBCQUFHTCxZQUFZLENBQUNLLE1BQWhCLENBQVY7O0FBREY7QUFBQTs7QUFFRSxNQUFLQSxNQUFNLENBQUMsQ0FBRCxDQUFOLEtBQWNELGFBQW5CLEVBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDRSxVQUFNLElBQUlFLEtBQUo7QUFBQTtBQUFBLDhDQUE2Q0YsYUFBN0MseUJBQXlFQyxNQUFNLENBQUMsQ0FBRCxDQUEvRSw0QkFBb0dBLE1BQXBHLGdCQUFnSE4sU0FBUyxDQUFDQyxZQUFELENBQXpILEVBQU47QUFDRCxHQUhEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJRDs7OztBQUVETyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkwsRUFBQUEsV0FBVyxFQUFYQSxXQURhO0FBQ0FKLEVBQUFBLFNBQVMsRUFBVEE7QUFEQSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVzIGEgZm9ybWF0dGVkIG1lc3NhZ2UgdGhhdCBkaXNwbGF5cyB0aGUgdG9rZW4gc2V0IHRoYXQgd2FzIHBhcnNlZCBhbmQgdGhlIGlucHV0LlxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VJbmZvKHBhcnNlQ29udGV4dClcclxue1xyXG4gIHJldHVybiBgUGFyc2VkIHRva2VucyBbJHtwYXJzZUNvbnRleHQuaW5wdXRUb2tlbnN9XSBmcm9tIGlucHV0IFwiJHtwYXJzZUNvbnRleHQuaW5wdXR9XCJgO1xyXG59XHJcblxyXG4vKipcclxuICogUmFpc2VzIGFuIGVycm9yIGlmIHRoZSBnaXZlbiB0b2tlbnMgZG8gbm90IHN0YXJ0IHdpdGggdGhlIGRlc2lyZWQgc3RhdGVcclxuICovXHJcbmZ1bmN0aW9uIGV4cGVjdFRva2VuKGV4cGVjdGVkU3RhcnQsIHBhcnNlQ29udGV4dClcclxue1xyXG4gIHZhciB0b2tlbnMgPSBwYXJzZUNvbnRleHQudG9rZW5zO1xyXG4gIGlmICggdG9rZW5zWzBdICE9PSBleHBlY3RlZFN0YXJ0KVxyXG4gIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYXJzZSBzdGF0ZSEgRXhwZWN0ZWQ6ICcke2V4cGVjdGVkU3RhcnR9JyBidXQgZ290OiAnJHt0b2tlbnNbMF19JyBmcm9tIGNoYWluOiBbJHt0b2tlbnN9XS4gJHtwYXJzZUluZm8ocGFyc2VDb250ZXh0KX1gKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgZXhwZWN0VG9rZW4sIHBhcnNlSW5mb1xyXG59Il19