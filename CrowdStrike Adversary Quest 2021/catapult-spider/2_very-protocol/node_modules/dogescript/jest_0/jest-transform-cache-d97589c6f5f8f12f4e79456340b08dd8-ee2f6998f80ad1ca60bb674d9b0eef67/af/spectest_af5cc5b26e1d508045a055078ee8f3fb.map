{"version":3,"sources":["spec.test.js"],"names":["testMetadata","require","util","getTmpfilePath","runSpecTest","testName","folder","shouldSkip","fs","existsSync","path","join","testFn","it","skip","Exception","expectedOutputPath","sourcePath","expectedOutput","readCleanCRLF","source","compiled","expect","toEqual","describe","test","apply"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA;AACA,IAAIA,YAAY,GAAGC,OAAO,CAACC,iBAAKC,cAAL,CAAoB,mBAApB,CAAD,CAA1B;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,MAA/B,EACA;AACE,MAAIC,UAAU,GAAGC,eAAGC,UAAH,CAAcC,iBAAKC,IAAL,CAAUL,MAAV,EAAkB,MAAlB,CAAd,CAAjB;;AACA,MAAIM,MAAM,GAAGL,UAAU,GAAGM,EAAE,CAACC,IAAN,GAAaD,EAApC;;AAEA,MAAI,CAACL,eAAGC,UAAH,CAAcC,iBAAKC,IAAL,CAAUL,MAAV,EAAkB,WAAlB,CAAd,CAAL,EAAoD;AAClD,UAAM,IAAIS,SAAJ,CAAc,8BAA8BT,MAA5C,CAAN;AACD;;AAED,MAAIU,kBAAkB,GAAKN,iBAAKC,IAAL,CAAUL,MAAV,EAAkB,WAAlB,CAA3B;;AACA,MAAIW,UAAU,GAAaP,iBAAKC,IAAL,CAAUL,MAAV,EAAkB,YAAlB,CAA3B;;AAEA,MAAIY,cAAc,GAAGhB,iBAAKiB,aAAL,CAAmBH,kBAAnB,CAArB;;AACA,MAAII,MAAM,GAAWlB,iBAAKiB,aAAL,CAAmBF,UAAnB,CAArB;;AACA,MAAII,QAAQ,GAAS,uBAAWD,MAAX,EAAmB,IAAnB,CAArB,CAbF,CAeE;;AACAR,EAAAA,MAAM,CAACP,QAAD,EAAW,YAAW;AAC1BiB,IAAAA,MAAM,CAACJ,cAAD,CAAN,CAAuBK,OAAvB,CAA+BF,QAA/B;AACD,GAFK,CAAN;AAGD;;AAEDG,QAAQ,CAAC,aAAD,EAAgB,YAAW;AACjC;AADiC;AAAA;AAAA;;AAAA;AAEjC,yBAAaxB,YAAb,8HAA2B;AAAtByB,MAAAA,IAAsB;AACzBrB,MAAAA,WAAW,CAACsB,KAAZ,CAAkB,IAAlB,EAAwBD,IAAxB;AACD;AAJgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKlC,CALO,CAAR","sourcesContent":["import dogescript from '../index';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport util from './util';\r\n\r\n// Generated via the globalSetup step\r\nvar testMetadata = require(util.getTmpfilePath(\"specMetadata.json\"))\r\n\r\nfunction runSpecTest(testName, folder)\r\n{\r\n  var shouldSkip = fs.existsSync(path.join(folder, 'skip'));\r\n  var testFn = shouldSkip ? it.skip : it;\r\n\r\n  if (!fs.existsSync(path.join(folder, 'expect.js'))) {\r\n    throw new Exception('No expected js exists in ' + folder)\r\n  }\r\n\r\n  var expectedOutputPath   = path.join(folder, 'expect.js');\r\n  var sourcePath           = path.join(folder, 'source.djs');\r\n\r\n  var expectedOutput = util.readCleanCRLF(expectedOutputPath);\r\n  var source         = util.readCleanCRLF(sourcePath);\r\n  var compiled       = dogescript(source, true);\r\n\r\n  // The actual test, Generate our assertion that the generated code matches the output\r\n  testFn(testName, function() {\r\n    expect(expectedOutput).toEqual(compiled);\r\n  });\r\n}\r\n\r\ndescribe(\"Spec Tests:\", function() {\r\n  // Generate tests based off of the test metadata\r\n  for (test of testMetadata) {\r\n    runSpecTest.apply(null, test)\r\n  }\r\n});\r\n"]}