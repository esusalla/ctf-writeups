cf68145ffd0e2d7403b72121c864310b
"use strict";

var _index = _interopRequireDefault(require("../index"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _util = _interopRequireDefault(require("./util"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Generated via the globalSetup step
var testMetadata = require(_util["default"].getTmpfilePath("specMetadata.json"));

function runSpecTest(testName, folder) {
  var shouldSkip = _fs["default"].existsSync(_path["default"].join(folder, 'skip'));

  var testFn = shouldSkip ? it.skip : it;

  if (!_fs["default"].existsSync(_path["default"].join(folder, 'expect.js'))) {
    throw new Exception('No expected js exists in ' + folder);
  }

  var expectedOutputPath = _path["default"].join(folder, 'expect.js');

  var sourcePath = _path["default"].join(folder, 'source.djs');

  var expectedOutput = _util["default"].readCleanCRLF(expectedOutputPath);

  var source = _util["default"].readCleanCRLF(sourcePath);

  var compiled = (0, _index["default"])(source, true); // The actual test, Generate our assertion that the generated code matches the output

  testFn(testName, function () {
    expect(expectedOutput).toEqual(compiled);
  });
}

describe("Spec Tests:", function () {
  // Generate tests based off of the test metadata
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = testMetadata[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      test = _step.value;
      runSpecTest.apply(null, test);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwZWMudGVzdC5qcyJdLCJuYW1lcyI6WyJ0ZXN0TWV0YWRhdGEiLCJyZXF1aXJlIiwidXRpbCIsImdldFRtcGZpbGVQYXRoIiwicnVuU3BlY1Rlc3QiLCJ0ZXN0TmFtZSIsImZvbGRlciIsInNob3VsZFNraXAiLCJmcyIsImV4aXN0c1N5bmMiLCJwYXRoIiwiam9pbiIsInRlc3RGbiIsIml0Iiwic2tpcCIsIkV4Y2VwdGlvbiIsImV4cGVjdGVkT3V0cHV0UGF0aCIsInNvdXJjZVBhdGgiLCJleHBlY3RlZE91dHB1dCIsInJlYWRDbGVhbkNSTEYiLCJzb3VyY2UiLCJjb21waWxlZCIsImV4cGVjdCIsInRvRXF1YWwiLCJkZXNjcmliZSIsInRlc3QiLCJhcHBseSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBO0FBQ0EsSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUNDLGlCQUFLQyxjQUFMLENBQW9CLG1CQUFwQixDQUFELENBQTFCOztBQUVBLFNBQVNDLFdBQVQsQ0FBcUJDLFFBQXJCLEVBQStCQyxNQUEvQixFQUNBO0FBQ0UsTUFBSUMsVUFBVSxHQUFHQyxlQUFHQyxVQUFILENBQWNDLGlCQUFLQyxJQUFMLENBQVVMLE1BQVYsRUFBa0IsTUFBbEIsQ0FBZCxDQUFqQjs7QUFDQSxNQUFJTSxNQUFNLEdBQUdMLFVBQVUsR0FBR00sRUFBRSxDQUFDQyxJQUFOLEdBQWFELEVBQXBDOztBQUVBLE1BQUksQ0FBQ0wsZUFBR0MsVUFBSCxDQUFjQyxpQkFBS0MsSUFBTCxDQUFVTCxNQUFWLEVBQWtCLFdBQWxCLENBQWQsQ0FBTCxFQUFvRDtBQUNsRCxVQUFNLElBQUlTLFNBQUosQ0FBYyw4QkFBOEJULE1BQTVDLENBQU47QUFDRDs7QUFFRCxNQUFJVSxrQkFBa0IsR0FBS04saUJBQUtDLElBQUwsQ0FBVUwsTUFBVixFQUFrQixXQUFsQixDQUEzQjs7QUFDQSxNQUFJVyxVQUFVLEdBQWFQLGlCQUFLQyxJQUFMLENBQVVMLE1BQVYsRUFBa0IsWUFBbEIsQ0FBM0I7O0FBRUEsTUFBSVksY0FBYyxHQUFHaEIsaUJBQUtpQixhQUFMLENBQW1CSCxrQkFBbkIsQ0FBckI7O0FBQ0EsTUFBSUksTUFBTSxHQUFXbEIsaUJBQUtpQixhQUFMLENBQW1CRixVQUFuQixDQUFyQjs7QUFDQSxNQUFJSSxRQUFRLEdBQVMsdUJBQVdELE1BQVgsRUFBbUIsSUFBbkIsQ0FBckIsQ0FiRixDQWVFOztBQUNBUixFQUFBQSxNQUFNLENBQUNQLFFBQUQsRUFBVyxZQUFXO0FBQzFCaUIsSUFBQUEsTUFBTSxDQUFDSixjQUFELENBQU4sQ0FBdUJLLE9BQXZCLENBQStCRixRQUEvQjtBQUNELEdBRkssQ0FBTjtBQUdEOztBQUVERyxRQUFRLENBQUMsYUFBRCxFQUFnQixZQUFXO0FBQ2pDO0FBRGlDO0FBQUE7QUFBQTs7QUFBQTtBQUVqQyx5QkFBYXhCLFlBQWIsOEhBQTJCO0FBQXRCeUIsTUFBQUEsSUFBc0I7QUFDekJyQixNQUFBQSxXQUFXLENBQUNzQixLQUFaLENBQWtCLElBQWxCLEVBQXdCRCxJQUF4QjtBQUNEO0FBSmdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLbEMsQ0FMTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRvZ2VzY3JpcHQgZnJvbSAnLi4vaW5kZXgnO1xyXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHV0aWwgZnJvbSAnLi91dGlsJztcclxuXHJcbi8vIEdlbmVyYXRlZCB2aWEgdGhlIGdsb2JhbFNldHVwIHN0ZXBcclxudmFyIHRlc3RNZXRhZGF0YSA9IHJlcXVpcmUodXRpbC5nZXRUbXBmaWxlUGF0aChcInNwZWNNZXRhZGF0YS5qc29uXCIpKVxyXG5cclxuZnVuY3Rpb24gcnVuU3BlY1Rlc3QodGVzdE5hbWUsIGZvbGRlcilcclxue1xyXG4gIHZhciBzaG91bGRTa2lwID0gZnMuZXhpc3RzU3luYyhwYXRoLmpvaW4oZm9sZGVyLCAnc2tpcCcpKTtcclxuICB2YXIgdGVzdEZuID0gc2hvdWxkU2tpcCA/IGl0LnNraXAgOiBpdDtcclxuXHJcbiAgaWYgKCFmcy5leGlzdHNTeW5jKHBhdGguam9pbihmb2xkZXIsICdleHBlY3QuanMnKSkpIHtcclxuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ05vIGV4cGVjdGVkIGpzIGV4aXN0cyBpbiAnICsgZm9sZGVyKVxyXG4gIH1cclxuXHJcbiAgdmFyIGV4cGVjdGVkT3V0cHV0UGF0aCAgID0gcGF0aC5qb2luKGZvbGRlciwgJ2V4cGVjdC5qcycpO1xyXG4gIHZhciBzb3VyY2VQYXRoICAgICAgICAgICA9IHBhdGguam9pbihmb2xkZXIsICdzb3VyY2UuZGpzJyk7XHJcblxyXG4gIHZhciBleHBlY3RlZE91dHB1dCA9IHV0aWwucmVhZENsZWFuQ1JMRihleHBlY3RlZE91dHB1dFBhdGgpO1xyXG4gIHZhciBzb3VyY2UgICAgICAgICA9IHV0aWwucmVhZENsZWFuQ1JMRihzb3VyY2VQYXRoKTtcclxuICB2YXIgY29tcGlsZWQgICAgICAgPSBkb2dlc2NyaXB0KHNvdXJjZSwgdHJ1ZSk7XHJcblxyXG4gIC8vIFRoZSBhY3R1YWwgdGVzdCwgR2VuZXJhdGUgb3VyIGFzc2VydGlvbiB0aGF0IHRoZSBnZW5lcmF0ZWQgY29kZSBtYXRjaGVzIHRoZSBvdXRwdXRcclxuICB0ZXN0Rm4odGVzdE5hbWUsIGZ1bmN0aW9uKCkge1xyXG4gICAgZXhwZWN0KGV4cGVjdGVkT3V0cHV0KS50b0VxdWFsKGNvbXBpbGVkKTtcclxuICB9KTtcclxufVxyXG5cclxuZGVzY3JpYmUoXCJTcGVjIFRlc3RzOlwiLCBmdW5jdGlvbigpIHtcclxuICAvLyBHZW5lcmF0ZSB0ZXN0cyBiYXNlZCBvZmYgb2YgdGhlIHRlc3QgbWV0YWRhdGFcclxuICBmb3IgKHRlc3Qgb2YgdGVzdE1ldGFkYXRhKSB7XHJcbiAgICBydW5TcGVjVGVzdC5hcHBseShudWxsLCB0ZXN0KVxyXG4gIH1cclxufSk7XHJcbiJdfQ==