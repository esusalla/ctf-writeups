a1f6cfa26b7d68c635556f38d9d4d0fb
"use strict";

var _index = _interopRequireDefault(require("../index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function expectInvalidSyntaxError(source, errorMessage) {
  var test = function test() {
    return (0, _index["default"])(source, true);
  };

  expect(test).toThrow(new SyntaxError(errorMessage));
}

describe("Syntax Errors", function () {
  describe("with", function () {
    it("'plz foo with' without arguments throws syntax error", function () {
      expectInvalidSyntaxError('plz foo with', "Expected arguments but got nothing. Allowed construct: with [args]. Parsed tokens [plz,foo,with] from input \"plz foo with\"");
    });
    it("'dose y with' without arguments throws syntax error", function () {
      expectInvalidSyntaxError('dose y with', 'Expected arguments but got nothing. Allowed construct: with [args]. Parsed tokens [dose,y,with] from input \"dose y with\"');
    });
    it("'very foo is plz bar with' without arguments throws syntax error", function () {
      expectInvalidSyntaxError('very foo is plz bar with', "Expected arguments but got nothing. Allowed construct: with [args]. Parsed tokens [very,foo,is,plz,bar,with] from input \"very foo is plz bar with\"");
    });
  });
  describe("levl", function () {
    it("'levl' without argument throws syntax error", function () {
      expectInvalidSyntaxError('array levl', "Expected argument but got nothing. Allowed construct: obj levl [arg]. Parsed tokens [array,levl] from input \"array levl\"");
    });
  });
  describe("git", function () {
    it("'git' without function name throws syntax error", function () {
      expectInvalidSyntaxError('git', "Expected getter name but got nothing. Allowed construct: git [name]. Parsed tokens [git] from input \"git\"");
    });
  });
  describe("sit", function () {
    it("'sit' without function name throws syntax error", function () {
      expectInvalidSyntaxError('sit', 'Expected setter name but got nothing. Allowed construct: sit [name] with [arg]. Parsed tokens [sit] from input \"sit\"');
    });
    it("'sit' without 'with' throws syntax error", function () {
      expectInvalidSyntaxError('sit fnName', "Expected: 'with' but got: 'undefined' from chain: []. Allowed construct: sit [name] with [arg]. Parsed tokens [sit,fnName] from input \"sit fnName\"");
    });
    it("'sit' without an argument throws a syntax error", function () {
      expectInvalidSyntaxError('sit fnName with', "Expected setter argument but got nothing. Allowed construct: sit [name] with [arg]. Parsed tokens [sit,fnName,with] from input \"sit fnName with\"");
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN5bnRheC50ZXN0LmpzIl0sIm5hbWVzIjpbImV4cGVjdEludmFsaWRTeW50YXhFcnJvciIsInNvdXJjZSIsImVycm9yTWVzc2FnZSIsInRlc3QiLCJleHBlY3QiLCJ0b1Rocm93IiwiU3ludGF4RXJyb3IiLCJkZXNjcmliZSIsIml0Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBRUEsU0FBU0Esd0JBQVQsQ0FBa0NDLE1BQWxDLEVBQTBDQyxZQUExQyxFQUF3RDtBQUN0RCxNQUFJQyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxHQUFXO0FBQ3BCLFdBQU8sdUJBQVdGLE1BQVgsRUFBbUIsSUFBbkIsQ0FBUDtBQUNELEdBRkQ7O0FBSUFHLEVBQUFBLE1BQU0sQ0FBQ0QsSUFBRCxDQUFOLENBQWFFLE9BQWIsQ0FBcUIsSUFBSUMsV0FBSixDQUFnQkosWUFBaEIsQ0FBckI7QUFDRDs7QUFHREssUUFBUSxDQUFDLGVBQUQsRUFBa0IsWUFBVztBQUNuQ0EsRUFBQUEsUUFBUSxDQUFDLE1BQUQsRUFBUyxZQUFXO0FBQzFCQyxJQUFBQSxFQUFFLENBQUMsc0RBQUQsRUFBeUQsWUFBWTtBQUNyRVIsTUFBQUEsd0JBQXdCLENBQ3RCLGNBRHNCLEVBRXRCLDhIQUZzQixDQUF4QjtBQUlELEtBTEMsQ0FBRjtBQU9BUSxJQUFBQSxFQUFFLENBQUMscURBQUQsRUFBd0QsWUFBWTtBQUNsRVIsTUFBQUEsd0JBQXdCLENBQ3RCLGFBRHNCLEVBRXRCLDRIQUZzQixDQUF4QjtBQUlILEtBTEMsQ0FBRjtBQU9BUSxJQUFBQSxFQUFFLENBQUMsa0VBQUQsRUFBcUUsWUFBVztBQUM5RVIsTUFBQUEsd0JBQXdCLENBQ3RCLDBCQURzQixFQUV0QixzSkFGc0IsQ0FBeEI7QUFJSCxLQUxDLENBQUY7QUFNRCxHQXJCTyxDQUFSO0FBd0JBTyxFQUFBQSxRQUFRLENBQUMsTUFBRCxFQUFTLFlBQVc7QUFDMUJDLElBQUFBLEVBQUUsQ0FBQyw2Q0FBRCxFQUFnRCxZQUFZO0FBQzVEUixNQUFBQSx3QkFBd0IsQ0FDdEIsWUFEc0IsRUFFdEIsNEhBRnNCLENBQXhCO0FBSUQsS0FMQyxDQUFGO0FBTUQsR0FQTyxDQUFSO0FBVUFPLEVBQUFBLFFBQVEsQ0FBQyxLQUFELEVBQVEsWUFBVztBQUN6QkMsSUFBQUEsRUFBRSxDQUFDLGlEQUFELEVBQW9ELFlBQVk7QUFDaEVSLE1BQUFBLHdCQUF3QixDQUN0QixLQURzQixFQUV0Qiw2R0FGc0IsQ0FBeEI7QUFJRCxLQUxDLENBQUY7QUFNRCxHQVBPLENBQVI7QUFVQU8sRUFBQUEsUUFBUSxDQUFDLEtBQUQsRUFBUSxZQUFXO0FBQ3pCQyxJQUFBQSxFQUFFLENBQUMsaURBQUQsRUFBb0QsWUFBWTtBQUNoRVIsTUFBQUEsd0JBQXdCLENBQ3RCLEtBRHNCLEVBRXRCLHdIQUZzQixDQUF4QjtBQUlELEtBTEMsQ0FBRjtBQU9BUSxJQUFBQSxFQUFFLENBQUMsMENBQUQsRUFBNkMsWUFBWTtBQUN6RFIsTUFBQUEsd0JBQXdCLENBQ3RCLFlBRHNCLEVBRXRCLHNKQUZzQixDQUF4QjtBQUlELEtBTEMsQ0FBRjtBQU9BUSxJQUFBQSxFQUFFLENBQUMsaURBQUQsRUFBb0QsWUFBWTtBQUNoRVIsTUFBQUEsd0JBQXdCLENBQ3RCLGlCQURzQixFQUV0QixvSkFGc0IsQ0FBeEI7QUFJRCxLQUxDLENBQUY7QUFNRCxHQXJCTyxDQUFSO0FBdUJELENBcEVPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZG9nZXNjcmlwdCBmcm9tICcuLi9pbmRleCc7XHJcblxyXG5mdW5jdGlvbiBleHBlY3RJbnZhbGlkU3ludGF4RXJyb3Ioc291cmNlLCBlcnJvck1lc3NhZ2UpIHtcclxuICB2YXIgdGVzdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGRvZ2VzY3JpcHQoc291cmNlLCB0cnVlKTtcclxuICB9O1xyXG5cclxuICBleHBlY3QodGVzdCkudG9UaHJvdyhuZXcgU3ludGF4RXJyb3IoZXJyb3JNZXNzYWdlKSk7XHJcbn1cclxuXHJcblxyXG5kZXNjcmliZShcIlN5bnRheCBFcnJvcnNcIiwgZnVuY3Rpb24oKSB7XHJcbiAgZGVzY3JpYmUoXCJ3aXRoXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgaXQoXCIncGx6IGZvbyB3aXRoJyB3aXRob3V0IGFyZ3VtZW50cyB0aHJvd3Mgc3ludGF4IGVycm9yXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZXhwZWN0SW52YWxpZFN5bnRheEVycm9yKFxyXG4gICAgICAgICdwbHogZm9vIHdpdGgnLFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgYXJndW1lbnRzIGJ1dCBnb3Qgbm90aGluZy4gQWxsb3dlZCBjb25zdHJ1Y3Q6IHdpdGggW2FyZ3NdLiBQYXJzZWQgdG9rZW5zIFtwbHosZm9vLHdpdGhdIGZyb20gaW5wdXQgXFxcInBseiBmb28gd2l0aFxcXCJcIlxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCInZG9zZSB5IHdpdGgnIHdpdGhvdXQgYXJndW1lbnRzIHRocm93cyBzeW50YXggZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGV4cGVjdEludmFsaWRTeW50YXhFcnJvcihcclxuICAgICAgICAgICdkb3NlIHkgd2l0aCcsXHJcbiAgICAgICAgICAnRXhwZWN0ZWQgYXJndW1lbnRzIGJ1dCBnb3Qgbm90aGluZy4gQWxsb3dlZCBjb25zdHJ1Y3Q6IHdpdGggW2FyZ3NdLiBQYXJzZWQgdG9rZW5zIFtkb3NlLHksd2l0aF0gZnJvbSBpbnB1dCBcXFwiZG9zZSB5IHdpdGhcXFwiJ1xyXG4gICAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIid2ZXJ5IGZvbyBpcyBwbHogYmFyIHdpdGgnIHdpdGhvdXQgYXJndW1lbnRzIHRocm93cyBzeW50YXggZXJyb3JcIiwgZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgZXhwZWN0SW52YWxpZFN5bnRheEVycm9yKFxyXG4gICAgICAgICAgJ3ZlcnkgZm9vIGlzIHBseiBiYXIgd2l0aCcsXHJcbiAgICAgICAgICBcIkV4cGVjdGVkIGFyZ3VtZW50cyBidXQgZ290IG5vdGhpbmcuIEFsbG93ZWQgY29uc3RydWN0OiB3aXRoIFthcmdzXS4gUGFyc2VkIHRva2VucyBbdmVyeSxmb28saXMscGx6LGJhcix3aXRoXSBmcm9tIGlucHV0IFxcXCJ2ZXJ5IGZvbyBpcyBwbHogYmFyIHdpdGhcXFwiXCJcclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG5cclxuICBkZXNjcmliZShcImxldmxcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBpdChcIidsZXZsJyB3aXRob3V0IGFyZ3VtZW50IHRocm93cyBzeW50YXggZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBleHBlY3RJbnZhbGlkU3ludGF4RXJyb3IoXHJcbiAgICAgICAgJ2FycmF5IGxldmwnLFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgYXJndW1lbnQgYnV0IGdvdCBub3RoaW5nLiBBbGxvd2VkIGNvbnN0cnVjdDogb2JqIGxldmwgW2FyZ10uIFBhcnNlZCB0b2tlbnMgW2FycmF5LGxldmxdIGZyb20gaW5wdXQgXFxcImFycmF5IGxldmxcXFwiXCJcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuXHJcbiAgZGVzY3JpYmUoXCJnaXRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBpdChcIidnaXQnIHdpdGhvdXQgZnVuY3Rpb24gbmFtZSB0aHJvd3Mgc3ludGF4IGVycm9yXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZXhwZWN0SW52YWxpZFN5bnRheEVycm9yKFxyXG4gICAgICAgICdnaXQnLFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgZ2V0dGVyIG5hbWUgYnV0IGdvdCBub3RoaW5nLiBBbGxvd2VkIGNvbnN0cnVjdDogZ2l0IFtuYW1lXS4gUGFyc2VkIHRva2VucyBbZ2l0XSBmcm9tIGlucHV0IFxcXCJnaXRcXFwiXCJcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuXHJcbiAgZGVzY3JpYmUoXCJzaXRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBpdChcIidzaXQnIHdpdGhvdXQgZnVuY3Rpb24gbmFtZSB0aHJvd3Mgc3ludGF4IGVycm9yXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZXhwZWN0SW52YWxpZFN5bnRheEVycm9yKFxyXG4gICAgICAgICdzaXQnLFxyXG4gICAgICAgICdFeHBlY3RlZCBzZXR0ZXIgbmFtZSBidXQgZ290IG5vdGhpbmcuIEFsbG93ZWQgY29uc3RydWN0OiBzaXQgW25hbWVdIHdpdGggW2FyZ10uIFBhcnNlZCB0b2tlbnMgW3NpdF0gZnJvbSBpbnB1dCBcXFwic2l0XFxcIidcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiJ3NpdCcgd2l0aG91dCAnd2l0aCcgdGhyb3dzIHN5bnRheCBlcnJvclwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGV4cGVjdEludmFsaWRTeW50YXhFcnJvcihcclxuICAgICAgICAnc2l0IGZuTmFtZScsXHJcbiAgICAgICAgXCJFeHBlY3RlZDogJ3dpdGgnIGJ1dCBnb3Q6ICd1bmRlZmluZWQnIGZyb20gY2hhaW46IFtdLiBBbGxvd2VkIGNvbnN0cnVjdDogc2l0IFtuYW1lXSB3aXRoIFthcmddLiBQYXJzZWQgdG9rZW5zIFtzaXQsZm5OYW1lXSBmcm9tIGlucHV0IFxcXCJzaXQgZm5OYW1lXFxcIlwiXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIidzaXQnIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGEgc3ludGF4IGVycm9yXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZXhwZWN0SW52YWxpZFN5bnRheEVycm9yKFxyXG4gICAgICAgICdzaXQgZm5OYW1lIHdpdGgnLFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgc2V0dGVyIGFyZ3VtZW50IGJ1dCBnb3Qgbm90aGluZy4gQWxsb3dlZCBjb25zdHJ1Y3Q6IHNpdCBbbmFtZV0gd2l0aCBbYXJnXS4gUGFyc2VkIHRva2VucyBbc2l0LGZuTmFtZSx3aXRoXSBmcm9tIGlucHV0IFxcXCJzaXQgZm5OYW1lIHdpdGhcXFwiXCIsXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbn0pO1xyXG4iXX0=