import itertools
import math
import random

from Crypto.Util.number import inverse, long_to_bytes


def miller_rabin(n, k=40):
    if n == 2:
        return True

    if n % 2 == 0:
        return False

    r, s = 0, n - 1
    while s % 2 == 0:
        r += 1
        s //= 2
    for _ in range(k):
        a = random.randrange(2, n - 1)
        x = pow(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True


def powerset(s):
    n = len(s)
    for r in range(1, n+1):
        for combo in itertools.combinations(s, r):
            yield combo


# challenge givens
ct_a=1991374644522844726604723395302447678829362766488998002689642863876589167224123634868869407586265887639572846618361378190717796457675877867002990630200549839187693737176043693114429036857443618075597595356236777647214186597416429862630588853297534066191784060030827904725960955181749644590885127762513958644117342351741609981560458367036971039921421548984093411630930209440031060634872093143755813835906517674672118355461511837533783279547447855290393938723966500874359457216314821548439555245649159786182924722770460929014017979622168454175758261065999271764594369618940918533185330319317089809708951104047147411596
ct_b=11560415492145861207516424108577715664730529386805857287246533744961821151018194362544284902991666685182413092786353089517543091603274250128250910669110530206320138191614471688310529571895441809729559056935543845898702106837033971935287923495445981173899073238286288875669342754013550227359718814123485311705960547980778357375585882146296937739196745327987012437076826111202650212821723168353665944362122152786549834258495316372518691633486765982945106049194892430437710982481105051765183397588927444843790029563399175420351710322220501327577415113508236805750358567711052779340011355629159610689505604941700815518380
d_a=12007894588345817095001901772235818535532128075248502006167506715501613386280619988757005912270381074208611126718938214462213079931302423653355153363846803336576965899104058007549509604040316897464770127372797630135493394807353800174267249408200186888724103432412296802728616667116382243738519746110159825921676647202689661952040602841752466515868580858475210918168761862255041985423595605698941150797550252491451770611246462256935118062094973933183288422900540413805923476283359196218128607678993284504582128505198491110084905108072190837781925478455984417366202863689318005069821086805269764308054632708127147397685
d_b=15309121030008789112453654624398278092026139678301334759817236349957760197277968332173160272007689043235997494440248487531238644015060915059836861728115118555482791561589562225055947155368216166612774271639118879220806859714069050410034235487298164832205885978355955618431606156727831992132535894020870312453902803351757466444078059503362362343138846985263572980446344678973847354860739168547872456538618897496981232096868408852088578700314051200160980186449222946973789039336701174360592471866811887750298968395798446811465432587371913161943176018766518394820191044593922558127924048562996714970537749736086175516533
e=65537


mult_phi_a = d_a * e - 1
mult_phi_b = d_b * e - 1
mult_phi_gcd = math.gcd(mult_phi_a, mult_phi_b)

# smaller factors of mult_phi_gcd found with https://www.alpertron.com.ar/ECM.HTM
gcd_factors = [2, 2, 3, 3, 1543, 36097, 1014259, 17275267, 33878479, 64555363525704839503363]

#for combo in powerset(gcd_factors):
#    prod = math.prod(combo)
#    val = mult_phi_gcd // prod + 1
#    if val > 3 and miller_rabin(val):
#        print("possible:", val)

# only prime value from above tests
p = 177279130816191665059944783286411855023035031289227941571673915784074353287733189099688126318264113305321082059619767094038966996649561164342515779196140056547333435193040798074799909334916510316728847254833619137382153503950749154356946058670079132324988450725735937306884337410304401871741381990982764516163


mult_q_min_1 = mult_phi_a // (p-1)
# smaller factors of mult_q_min_1 found with https://www.alpertron.com.ar/ECM.HTM
q_factors = [2, 3, 17, 28477, 446123, 120465998447701769] 

#for combo in powerset(q_factors):
#    prod = math.prod(combo)
#    val = mult_q_min_1 // prod + 1
#    if val > 3 and miller_rabin(val):
#        print("possible:", val)

# only prime value from above tests
q = 155884012157322571917571429609117477794801005792976713173607792359939561733216007547732077875565730627490168412882054028115468195925968305125054508969875158276459353283308944667481012666571096247936714275405402155862690247593753125976847078582510938772358086998385220759841590572613434454768180423789003022307


mult_r_min_1 = mult_phi_b // (p-1)
# smaller factors of mult_r_min_1 found with https://www.alpertron.com.ar/ECM.HTM
r_factors = [2, 3, 5, 7, 7, 1061]

#for combo in powerset(r_factors):
#    prod = math.prod(combo)
#    val = mult_r_min_1 // prod + 1
#    if val > 3 and miller_rabin(val):
#        print("possible:", val)

# only prime value from above tests
r = 152403791625721851654120555560673744553701328109255879726337480096744356018547509475023868657897447439271501318332177621761545812231960220886709355355570370122257259486344955476929483307543879747176492652883512877777163462444499810416443763758426816456424484060280743786614239115245058838657579029682477426407


n_a = p * q
n_b = p * r
# check
#phi_a = (p-1) * (q-1)
#phi_b = (p-1) * (r-1)
#print((mult_phi_a // phi_a * phi_a) == mult_phi_a)
#print((mult_phi_b // phi_b * phi_b) == mult_phi_b)


pt_a = long_to_bytes(pow(ct_a, d_a, n_a))
pt_b = long_to_bytes(pow(ct_b, d_b, n_b))

print(pt_a.decode())
print(pt_b.decode())
